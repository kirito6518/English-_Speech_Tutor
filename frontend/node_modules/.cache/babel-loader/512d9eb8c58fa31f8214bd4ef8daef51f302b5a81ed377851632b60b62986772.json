{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, Transition as _Transition, withCtx as _withCtx, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"body\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"rules-container\"\n};\nconst _hoisted_3 = {\n  class: \"background-container\"\n};\nconst _hoisted_4 = {\n  class: \"mode-selection\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"game-content\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_7 = {\n  class: \"game-card-container\"\n};\nconst _hoisted_8 = {\n  class: \"level\"\n};\nconst _hoisted_9 = [\"src\", \"onClick\"];\nconst _hoisted_10 = {\n  class: \"page\"\n};\nconst _hoisted_11 = {\n  class: \"overlay-content\"\n};\nconst _hoisted_12 = {\n  key: 0,\n  class: \"countdown-display\"\n};\nconst _hoisted_13 = {\n  key: 1,\n  class: \"timeout-message\"\n};\nconst _hoisted_14 = {\n  class: \"correct-answer-text\"\n};\nconst _hoisted_15 = {\n  class: \"boardOfNine\"\n};\nconst _hoisted_16 = {\n  key: 0\n};\nconst _hoisted_17 = {\n  class: \"grid-item\"\n};\nconst _hoisted_18 = [\"onClick\"];\nconst _hoisted_19 = {\n  class: \"answer\"\n};\nconst _hoisted_20 = [\"onClick\"];\nconst _hoisted_21 = {\n  key: 0,\n  class: \"success-message\"\n};\nconst _hoisted_22 = {\n  class: \"correct-answer-text\"\n};\nconst _hoisted_23 = {\n  key: 1,\n  class: \"error-feedback\"\n};\nconst _hoisted_24 = {\n  class: \"user-answer\"\n};\nconst _hoisted_25 = {\n  class: \"grid-item\"\n};\nconst _hoisted_26 = {\n  class: \"answer\"\n};\nconst _hoisted_27 = {\n  class: \"answer-button\"\n};\nconst _hoisted_28 = {\n  key: 0\n};\nconst _hoisted_29 = {\n  key: 1\n};\nconst _hoisted_30 = {\n  key: 2,\n  class: \"success-message\"\n};\nconst _hoisted_31 = {\n  class: \"correct-answer-text\"\n};\nconst _hoisted_32 = {\n  key: 3,\n  class: \"error-feedback\"\n};\nconst _hoisted_33 = {\n  class: \"user-answer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavbarPage = _resolveComponent(\"NavbarPage\");\n  const _component_el_pagination = _resolveComponent(\"el-pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavbarPage), _createCommentVNode(\" 游戏规则页面 \"), _createVNode(_Transition, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [!$data.gameStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[6] || (_cache[6] = _createElementVNode(\"p\", {\n      class: \"title\"\n    }, \"九宫格游戏\", -1 /* HOISTED */)), _cache[7] || (_cache[7] = _createElementVNode(\"p\", {\n      class: \"game-rule-text\"\n    }, \" 游戏规则：每关游戏将给出一个九宫格，九宫格中包含一句五言或七言诗句，你需要找出正确的诗句。 你可以在下方选择闯关模式。 语音模式需要在10秒内说出正确的答案，注意：只有一次作答机会； 点击模式需要在10秒内按顺序点击九宫格内的汉字卡片，如果点错了可以在作答区点击清除。 \", -1 /* HOISTED */)), _cache[8] || (_cache[8] = _createElementVNode(\"p\", {\n      class: \"subtitle\"\n    }, \"你准备好接受挑战了吗？让我们开始吧！\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"span\", {\n      class: _normalizeClass({\n        active: $data.voiceMode\n      })\n    }, \"语音模式\", 2 /* CLASS */), _createElementVNode(\"button\", {\n      id: \"modeSelect\",\n      class: _normalizeClass([\"modeSelect\", {\n        active: $data.voiceMode\n      }]),\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleMode && $options.toggleMode(...args))\n    }, null, 2 /* CLASS */), _createElementVNode(\"span\", {\n      class: _normalizeClass({\n        active: !$data.voiceMode\n      })\n    }, \"点击模式\", 2 /* CLASS */)]), _createElementVNode(\"button\", {\n      class: \"start-game-btn\",\n      onClick: _cache[1] || (_cache[1] = (...args) => $options.startGame && $options.startGame(...args))\n    }, \"开始游戏\")])])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 游戏内容页面 \"), _createVNode(_Transition, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [$data.gameStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [$data.showError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentPageQuestions, (question, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: index,\n        class: \"game-card\"\n      }, [_createElementVNode(\"div\", _hoisted_8, \"第\" + _toDisplayString(index + 1 + ($data.currentPage - 1) * 10) + \"关\", 1 /* TEXT */), _createElementVNode(\"img\", {\n        src: require(`@/assets/image/game${index % 10 + 1}.png`),\n        style: {\n          \"border-radius\": \"20px\",\n          \"width\": \"100%\",\n          \"height\": \"auto\",\n          \"cursor\": \"pointer\"\n        },\n        onClick: $event => $options.showOverlay(index + ($data.currentPage - 1) * 10)\n      }, null, 8 /* PROPS */, _hoisted_9), _createElementVNode(\"div\", {\n        class: \"game-item\",\n        style: _normalizeStyle($options.getStyle(index + ($data.currentPage - 1) * 10))\n      }, null, 4 /* STYLE */)]);\n    }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_10, [_createVNode(_component_el_pagination, {\n      background: \"\",\n      layout: \"prev, pager, next\",\n      total: $data.totalOfGame,\n      class: \"mt-4\",\n      \"page-size\": 10,\n      \"current-page\": $data.currentPage,\n      onCurrentChange: $options.handlePageChange\n    }, null, 8 /* PROPS */, [\"total\", \"current-page\", \"onCurrentChange\"])]), _createElementVNode(\"button\", {\n      class: \"back-to-rules-btn\",\n      onClick: _cache[2] || (_cache[2] = (...args) => $options.backToRules && $options.backToRules(...args))\n    }, \"返回规则\")])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" Overlay \"), $data.isOverlayVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"overlay\",\n    onClick: _cache[5] || (_cache[5] = _withModifiers((...args) => $options.hideOverlay && $options.hideOverlay(...args), [\"self\"]))\n  }, [_createElementVNode(\"div\", _hoisted_11, [_createCommentVNode(\" 添加倒计时显示 \"), $data.countdown.isActive ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, \" 剩余时间：\" + _toDisplayString($data.countdown.time) + \"秒 \", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 添加时间到显示 \"), $data.showAnswer && !$data.gameResult.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_cache[9] || (_cache[9] = _createElementVNode(\"div\", null, \"时间到！\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, \" 正确答案: \" + _toDisplayString($data.gameResult.correctAnswer), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Game Question \"), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    class: \"close-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.hideOverlay && $options.hideOverlay(...args))\n  }, \"×\"), _createCommentVNode(\" 点击模式 \"), !$data.voiceMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.gameSession.currentQuestion.title, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"grid-row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (item, colIndex) => {\n      return _openBlock(), _createElementBlock(\"button\", {\n        key: colIndex,\n        onClick: $event => $options.addToAnswer(item),\n        class: _normalizeClass([\"grid-button\", {\n          'correct-grid': $data.gameResult.isCorrect,\n          'wrong-grid': $data.gameResult.userAnswer && !$data.gameResult.isCorrect\n        }])\n      }, _toDisplayString(item), 11 /* TEXT, CLASS, PROPS */, _hoisted_18);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Answer area \"), _createElementVNode(\"div\", _hoisted_19, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.answerArray, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      onClick: $event => $options.removeFromAnswer(answer)\n    }, [_createElementVNode(\"button\", {\n      class: _normalizeClass([\"answer-button\", {\n        'correct-answer-btn': $data.gameResult.isCorrect\n      }])\n    }, _toDisplayString(answer), 3 /* TEXT, CLASS */)], 8 /* PROPS */, _hoisted_20);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 答案反馈区 \"), $data.gameResult.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"success-icon\"\n  }, \"✓\", -1 /* HOISTED */)), _cache[11] || (_cache[11] = _createElementVNode(\"div\", null, \"恭喜，回答正确!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_22, \" 正确答案: \" + _toDisplayString($data.gameResult.correctAnswer), 1 /* TEXT */)])) : $data.gameResult.userAnswer && !$data.gameResult.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_cache[12] || (_cache[12] = _createElementVNode(\"div\", null, \"再试试看，你可以的!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_24, \"您的答案: \" + _toDisplayString($data.gameResult.userAnswer), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 语音模式 \"), _createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.gameSession.currentQuestion.title, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"grid-row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (item, colIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: colIndex,\n        class: \"grid-button\"\n      }, _toDisplayString(item), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Answer area \"), _createElementVNode(\"div\", _hoisted_26, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.answerArray, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"button\", _hoisted_27, _toDisplayString(answer), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Start Recording Button \"), !$data.isRecording ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.startRecording && $options.startRecording(...args)),\n    class: \"start-recording-btn\"\n  }, \"开始录音\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_29, _cache[13] || (_cache[13] = [_createElementVNode(\"p\", null, \"正在录音... 10秒倒计时\", -1 /* HOISTED */)]))), _createCommentVNode(\" 答案反馈区 \"), $data.gameResult.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_cache[14] || (_cache[14] = _createElementVNode(\"div\", {\n    class: \"success-icon\"\n  }, \"✓\", -1 /* HOISTED */)), _cache[15] || (_cache[15] = _createElementVNode(\"div\", null, \"恭喜，回答正确!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_31, \" 正确答案: \" + _toDisplayString($data.gameResult.correctAnswer), 1 /* TEXT */)])) : $data.gameResult.userAnswer && !$data.gameResult.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, [_cache[16] || (_cache[16] = _createElementVNode(\"div\", null, \"再试试看，你可以的!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_33, \"您的答案: \" + _toDisplayString($data.gameResult.userAnswer), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_NavbarPage","_createCommentVNode","_Transition","name","default","_withCtx","$data","gameStarted","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_normalizeClass","active","voiceMode","id","onClick","_cache","args","$options","toggleMode","startGame","_","_hoisted_5","showError","_hoisted_6","_toDisplayString","errorMessage","_hoisted_7","_Fragment","_renderList","currentPageQuestions","question","index","_hoisted_8","currentPage","src","require","style","$event","showOverlay","_hoisted_9","_normalizeStyle","getStyle","_hoisted_10","_component_el_pagination","background","layout","total","totalOfGame","onCurrentChange","handlePageChange","backToRules","isOverlayVisible","_withModifiers","hideOverlay","_hoisted_11","countdown","isActive","_hoisted_12","time","showAnswer","gameResult","isCorrect","_hoisted_13","_hoisted_14","correctAnswer","_hoisted_15","_hoisted_16","_hoisted_17","gameSession","currentQuestion","title","row","rowIndex","item","colIndex","addToAnswer","userAnswer","_hoisted_18","_hoisted_19","answerArray","answer","removeFromAnswer","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","isRecording","_hoisted_28","startRecording","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33"],"sources":["D:\\HCI_FINAL\\new_copy\\frontend\\src\\components\\GameMode.vue"],"sourcesContent":["<template>\n  <div class=\"body\">\n    <NavbarPage />\n\n    <!-- 游戏规则页面 -->\n    <transition name=\"fade\">\n      <div v-if=\"!gameStarted\" class=\"rules-container\">\n        <div class=\"background-container\">\n          <p class=\"title\">九宫格游戏</p>\n          <p class=\"game-rule-text\">\n            游戏规则：每关游戏将给出一个九宫格，九宫格中包含一句五言或七言诗句，你需要找出正确的诗句。\n            你可以在下方选择闯关模式。\n            语音模式需要在10秒内说出正确的答案，注意：只有一次作答机会；\n            点击模式需要在10秒内按顺序点击九宫格内的汉字卡片，如果点错了可以在作答区点击清除。\n          </p>\n          <p class=\"subtitle\">你准备好接受挑战了吗？让我们开始吧！</p>\n\n          <div class=\"mode-selection\">\n            <span :class=\"{ active: voiceMode }\">语音模式</span>\n            <button id=\"modeSelect\" class=\"modeSelect\" @click=\"toggleMode\" :class=\"{ active: voiceMode }\"></button>\n            <span :class=\"{ active: !voiceMode }\">点击模式</span>\n          </div>\n\n          <button class=\"start-game-btn\" @click=\"startGame\">开始游戏</button>\n        </div>\n      </div>\n    </transition>\n\n    <!-- 游戏内容页面 -->\n    <transition name=\"fade\">\n      <div v-if=\"gameStarted\" class=\"game-content\">\n        <div v-if=\"showError\" class=\"error-message\">{{ errorMessage }}</div>\n        <div class=\"game-card-container\">\n          <div v-for=\"(question, index) in currentPageQuestions\" :key=\"index\" class=\"game-card\">\n            <div class=\"level\">第{{ index + 1 + (currentPage - 1) * 10 }}关</div>\n            <img :src=\"require(`@/assets/image/game${(index % 10) + 1}.png`)\" style=\"border-radius: 20px; width: 100%; height: auto; cursor: pointer;\"\n              @click=\"showOverlay(index + (currentPage - 1) * 10)\">\n            <div class=\"game-item\" :style=\"getStyle(index + (currentPage - 1) * 10)\"></div>\n          </div>\n        </div>\n\n        <div class=\"page\">\n          <el-pagination background layout=\"prev, pager, next\" :total=\"totalOfGame\" class=\"mt-4\" :page-size=\"10\"\n            :current-page=\"currentPage\" @current-change=\"handlePageChange\"></el-pagination>\n        </div>\n\n        <button class=\"back-to-rules-btn\" @click=\"backToRules\">返回规则</button>\n      </div>\n    </transition>\n\n    <!-- Overlay -->\n    <div v-if=\"isOverlayVisible\" class=\"overlay\" @click.self=\"hideOverlay\">\n      <div class=\"overlay-content\">\n        <!-- 添加倒计时显示 -->\n        <div class=\"countdown-display\" v-if=\"countdown.isActive\">\n          剩余时间：{{ countdown.time }}秒\n        </div>\n        \n        <!-- 添加时间到显示 -->\n        <div v-if=\"showAnswer && !gameResult.isCorrect\" class=\"timeout-message\">\n          <div>时间到！</div>\n          <div class=\"correct-answer-text\">\n            正确答案: {{ gameResult.correctAnswer }}\n          </div>\n        </div>\n\n        <!-- Game Question -->\n        <div class=\"boardOfNine\">\n          <button class=\"close-button\" @click=\"hideOverlay\">&times;</button>\n\n          <!-- 点击模式 -->\n          <div v-if=\"!voiceMode\">\n            <div class=\"grid-item\">\n              <div v-for=\"(row, rowIndex) in gameSession.currentQuestion.title\" :key=\"rowIndex\"\n                class=\"grid-row\">\n                <button v-for=\"(item, colIndex) in row\" :key=\"colIndex\" @click=\"addToAnswer(item)\" class=\"grid-button\"\n                  :class=\"{ 'correct-grid': gameResult.isCorrect, 'wrong-grid': gameResult.userAnswer && !gameResult.isCorrect }\">\n                  {{ item }}\n                </button>\n              </div>\n            </div>\n\n            <!-- Answer area -->\n            <div class=\"answer\">\n              <div v-for=\"(answer, index) in answerArray\" :key=\"index\" @click=\"removeFromAnswer(answer)\">\n                <button class=\"answer-button\" :class=\"{ 'correct-answer-btn': gameResult.isCorrect }\">{{ answer }}</button>\n              </div>\n            </div>\n            \n            <!-- 答案反馈区 -->\n            <div v-if=\"gameResult.isCorrect\" class=\"success-message\">\n              <div class=\"success-icon\">✓</div>\n              <div>恭喜，回答正确!</div>\n              <div class=\"correct-answer-text\">\n                正确答案: {{ gameResult.correctAnswer }}\n              </div>\n            </div>\n            \n            <div v-else-if=\"gameResult.userAnswer && !gameResult.isCorrect\" class=\"error-feedback\">\n              <div>再试试看，你可以的!</div>\n              <div class=\"user-answer\">您的答案: {{ gameResult.userAnswer }}</div>\n            </div>\n          </div>\n\n          <!-- 语音模式 -->\n          <div v-else>\n            <div class=\"grid-item\">\n              <div v-for=\"(row, rowIndex) in gameSession.currentQuestion.title\" :key=\"rowIndex\"\n                class=\"grid-row\">\n                <div v-for=\"(item, colIndex) in row\" :key=\"colIndex\" class=\"grid-button\">\n                  {{ item }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Answer area -->\n            <div class=\"answer\">\n              <div v-for=\"(answer, index) in answerArray\" :key=\"index\">\n                <button class=\"answer-button\">{{ answer }}</button>\n              </div>\n            </div>\n\n            <!-- Start Recording Button -->\n            <div v-if=\"!isRecording\">\n              <button @click=\"startRecording\" class=\"start-recording-btn\">开始录音</button>\n            </div>\n            <div v-else>\n              <p>正在录音... 10秒倒计时</p>\n            </div>\n            \n            <!-- 答案反馈区 -->\n            <div v-if=\"gameResult.isCorrect\" class=\"success-message\">\n              <div class=\"success-icon\">✓</div>\n              <div>恭喜，回答正确!</div>\n              <div class=\"correct-answer-text\">\n                正确答案: {{ gameResult.correctAnswer }}\n              </div>\n            </div>\n            \n            <div v-else-if=\"gameResult.userAnswer && !gameResult.isCorrect\" class=\"error-feedback\">\n              <div>再试试看，你可以的!</div>\n              <div class=\"user-answer\">您的答案: {{ gameResult.userAnswer }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport NavbarPage from './NavbarPage.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'GamePage',\n  data() {\n    return {\n      gameStarted: false,  // 控制游戏是否开始\n      voiceMode: false, // Controls the mode, true for voice mode, false for click mode\n      isOverlayVisible: false, // 控制蒙版显示/隐藏\n      currentIndex: null, // 记录当前点击的卡片索引\n      \n      // 游戏状态数据\n      gameSession: {\n        sessionId: null,\n        currentQuestion: null,\n        questionNumber: 0,\n        totalQuestions: 0,\n        score: 0,\n        gameCompleted: false,\n        allQuestions: [] // 存储所有题目信息\n      },\n      \n      // 保存每个关卡的游戏会话数据\n      levelGameSessions: {},\n      \n      // 页面加载状态\n      pagesLoaded: {},\n      \n      // 页面显示数据\n      questionsOfGridData: [],\n      totalOfGame: 50,\n      currentPage: 1,\n      answerArray: [], // Store the answers\n      stateOfGrid: Array(50).fill(1), // 初始状态都是未完成\n      isRecording: false,\n      \n      // 错误状态\n      errorMessage: '',\n      showError: false,\n      \n      // 游戏结果\n      gameResult: {\n        isCorrect: false,\n        correctAnswer: '',\n        message: '',\n        userAnswer: ''\n      },\n      countdown: {\n        time: 10,\n        timer: null,\n        isActive: false\n      },\n      showAnswer: false\n    }\n  },\n  components: {\n    NavbarPage\n  },\n  mounted() {\n    // 加载第一页的九宫格题目\n    this.loadQuestionsForPage(1);\n    this.pagesLoaded[1] = true;\n    console.log('初始化加载第1页数据');\n  },\n  computed: {\n    currentPageQuestions() {\n      console.log('计算当前页显示数据，当前页:', this.currentPage, '数据长度:', this.questionsOfGridData.length);\n      \n      if (this.questionsOfGridData.length === 0) {\n        console.log('当前没有题目数据，返回空数组');\n        return [];\n      }\n      \n      // 确保每页显示10个问题\n      const questionsPerPage = 10;\n      const result = [];\n      \n      for (let i = 0; i < questionsPerPage; i++) {\n        if (i < this.questionsOfGridData.length) {\n          result.push(this.questionsOfGridData[i]);\n        } else {\n          // 如果数据不足，添加默认问题\n          result.push({\n            id: `question_default_${i}`,\n            question: [\n              ['空', '空', '空'],\n              ['空', '空', '空'],\n              ['空', '空', '空']\n            ],\n            answer: '默认题目'\n          });\n        }\n      }\n      \n      console.log('当前页显示', result.length, '个问题');\n      return result;\n    }\n  },\n  methods: {\n    startGame() {\n      this.gameStarted = true;\n    },\n    backToRules() {\n      this.gameStarted = false;\n    },\n    // 加载指定页的九宫格题目\n    loadQuestionsForPage(page) {\n      console.log('加载第', page, '页的九宫格题目');\n      \n      // 如果该页已经加载过，则不重复生成\n      if (this.pagesLoaded[page]) {\n        console.log('该页已加载过，使用缓存数据');\n        return;\n      }\n      \n      // 生成模拟的九宫格数据，每页10关\n      const mockQuestions = [];\n      for (let i = 0; i < 10; i++) {\n        const index = (page - 1) * 10 + i;\n        mockQuestions.push({\n          id: `question_${index}`,\n          question: [\n            ['春', '眠', '不'],\n            ['觉', '晓', '处'],\n            ['闻', '啼', '鸟']\n          ],\n          answer: '春眠不觉晓，处处闻啼鸟'\n        });\n      }\n      \n      // 更新本页的问题数据\n      this.questionsOfGridData = mockQuestions;\n      \n      // 标记该页已加载\n      this.pagesLoaded[page] = true;\n      \n      console.log('页面数据加载完成，生成了', mockQuestions.length, '个问题');\n    },\n    \n    // 创建新游戏\n    async createGame() {\n      try {\n        // 如果已有会话ID，则重用\n        if (this.gameSession.sessionId) {\n          console.log('使用现有游戏会话:', this.gameSession.sessionId);\n          return true;\n        }\n        \n        console.log('创建新游戏会话');\n        // 调用创建游戏API\n        const response = await axios.post('/api/ninegrid/create', {}, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        const gameData = response.data;\n        console.log('创建游戏响应:', gameData);\n        \n        // 保存游戏会话信息\n        this.gameSession = {\n          sessionId: gameData.session_id,\n          currentQuestion: gameData.question,\n          questionNumber: gameData.question_number,\n          totalQuestions: gameData.total_questions,\n          score: gameData.score,\n          gameCompleted: false,\n          allQuestions: [] // 会在提交答案时获取\n        };\n        \n        return true;\n      } catch (error) {\n        console.error('创建游戏失败:', error);\n        this.showErrorMessage('创建游戏失败，请稍后再试');\n        return false;\n      }\n    },\n    \n    // 提交用户答案\n    async submitAnswer(userAnswer) {\n      try {\n        // 如果已经回答正确，不再提交\n        if (this.gameResult.isCorrect) {\n          console.log('已经回答正确，不再提交');\n          return;\n        }\n        \n        console.log('提交答案:', userAnswer, '当前关卡索引:', this.currentIndex);\n        \n        // 调用提交答案API\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: userAnswer,\n          question_index: this.currentIndex // 添加题目索引参数\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        console.log('服务器响应:', response.data);\n        \n        const result = response.data;\n        \n        // 更新游戏状态\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions;\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        \n        console.log('是否正确:', result.is_correct);\n        \n        // 明确设置游戏结果状态\n        this.gameResult.isCorrect = result.is_correct;\n        this.gameResult.correctAnswer = result.correct_answer;\n        this.gameResult.userAnswer = result.recognized_text;\n        this.gameResult.message = result.is_correct ? \n          '回答正确！' : \n          `回答错误！正确答案是：${result.correct_answer}`;\n        \n        console.log('更新后的游戏结果状态:', this.gameResult);\n        \n        // 如果答对了，清除倒计时\n        if (result.is_correct) {\n          this.clearCountdown();\n          this.stateOfGrid[this.currentIndex] = 0;\n          this.finalScore(true);\n        } else {\n          // 显示错误信息\n          //this.showErrorMessage(`答案不正确，再试试吧！`);\n        }\n        \n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[this.currentIndex] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('提交答案失败:', error);\n        this.showErrorMessage('提交答案失败，请稍后再试');\n      }\n    },\n    \n    // 显示错误消息\n    showErrorMessage(message) {\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    \n    // 显示九宫格题目\n    async showOverlay(index) {\n      console.log('打开关卡:', index, '所在页:', Math.floor(index / 10) + 1);\n      this.currentIndex = index; // Set the current question index\n      \n      // 重置游戏结果状态\n      this.gameResult.isCorrect = false;\n      this.gameResult.correctAnswer = '';\n      this.gameResult.userAnswer = '';\n      this.gameResult.message = '';\n      \n      // 检查该关卡是否已有游戏会话数据\n      if (!this.levelGameSessions[index]) {\n        // 如果游戏会话不存在，创建新的游戏会话\n        if (!this.gameSession.sessionId) {\n          // 创建新游戏\n          const success = await this.createGame();\n          if (!success) return;\n        }\n        \n        console.log('创建关卡数据，关卡索引:', index);\n        // 保存当前关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } else {\n        console.log('使用已有关卡数据，关卡索引:', index);\n        // 使用之前保存的游戏会话数据\n        this.gameSession = JSON.parse(JSON.stringify(this.levelGameSessions[index]));\n      }\n      \n      // 获取当前关卡的题目\n      try {\n        console.log('获取题目，关卡索引:', index, '会话ID:', this.gameSession.sessionId);\n        \n        // 确保游戏会话ID存在\n        if (!this.gameSession.sessionId) {\n          console.error('游戏会话ID不存在，无法获取题目');\n          this.showErrorMessage('游戏初始化失败，请刷新页面重试');\n          return;\n        }\n        \n        // 提交一个空答案来获取当前关卡的题目\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: '',  // 空答案，只是为了获取题目\n          question_index: index // 明确指定要获取的题目索引\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        console.log('获取题目响应(完整数据):', JSON.stringify(response.data));\n        const result = response.data;\n        \n        // 打印关键数据\n        console.log('当前题目原始数据:', result.current_question);\n        console.log('题目标题类型:', typeof result.current_question.title);\n        if (Array.isArray(result.current_question.title)) {\n          console.log('题目是数组, 长度:', result.current_question.title.length);\n          if (result.current_question.title.length > 0) {\n            console.log('第一个元素类型:', typeof result.current_question.title[0]);\n          }\n        }\n        \n        // 确保currentQuestion存在并且有正确结构\n        if (!result.current_question) {\n          result.current_question = {\n            title: [['','',''],['','',''],['','','']],\n            answer: ''\n          };\n        }\n        \n        // 确保currentQuestion.title是二维数组格式\n        if (result.current_question && result.current_question.title) {\n          // 检查title是否已经是二维数组\n          const title = result.current_question.title;\n          \n          console.log('原始title数据:', JSON.stringify(title));\n          \n          // 确保title是二维数组\n          let formattedTitle;\n          if (Array.isArray(title) && Array.isArray(title[0])) {\n            // 已经是二维数组，不需要转换\n            formattedTitle = title;\n          } else if (Array.isArray(title)) {\n            // 一维数组，转为3x3格式\n            // 检查数组长度是否为9\n            if (title.length === 9) {\n              formattedTitle = [\n                title.slice(0, 3),\n                title.slice(3, 6),\n                title.slice(6, 9)\n              ];\n            } else {\n              // 如果长度不是9，尝试取前9个元素或填充\n              const normalizedArray = [...title];\n              while (normalizedArray.length < 9) {\n                normalizedArray.push('');\n              }\n              formattedTitle = [\n                normalizedArray.slice(0, 3),\n                normalizedArray.slice(3, 6),\n                normalizedArray.slice(6, 9)\n              ];\n            }\n          } else if (typeof title === 'string') {\n            // 字符串，转为3x3格式\n            const chars = title.split('');\n            // 确保长度为9\n            while (chars.length < 9) {\n              chars.push('');\n            }\n            formattedTitle = [\n              chars.slice(0, 3),\n              chars.slice(3, 6),\n              chars.slice(6, 9)\n            ];\n          } else {\n            // 未知格式，使用默认空二维数组\n            formattedTitle = [['','',''],['','',''],['','','']];\n            console.error('未知的title格式:', typeof title, title);\n          }\n          \n          console.log('格式化后的title:', JSON.stringify(formattedTitle));\n          \n          // 更新题目\n          result.current_question.title = formattedTitle;\n        }\n        \n        // 更新当前题目\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions || [];\n        \n        // 打印当前题目格式\n        console.log('最终题目数据:', JSON.stringify(this.gameSession.currentQuestion));\n        \n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('获取题目失败:', error);\n        this.showErrorMessage('获取题目失败，请稍后再试');\n        return;\n      }\n      \n      // 清空答案数组\n      this.answerArray = [];\n      \n      // 在获取题目后启动倒计时\n      this.startCountdown();\n      \n      // 显示九宫格\n      this.isOverlayVisible = true;\n      \n      if (this.voiceMode) {\n        this.startRecording();\n      }\n    },\n    \n    hideOverlay() {\n      this.isOverlayVisible = false;\n      this.answerArray = [];\n      this.clearCountdown();  // 清理倒计时\n    },\n    \n    // 点击模式：添加字符到答案\n    addToAnswer(item) {\n      // 如果已经回答正确，不再添加新字符\n      if (this.gameResult.isCorrect) {\n        return;\n      }\n      \n      this.answerArray.push(item); // 将用户点击的字符添加到答案数组\n      \n      // 在每次添加字符后检查答案\n      if (this.gameSession && this.gameSession.currentQuestion) {\n        // 组合用户当前输入的答案\n        const userAnswer = this.answerArray.join('');\n        \n        // 每输入一个字符就尝试检查答案，不管长度\n        this.checkAnswerMatching(userAnswer);\n      }\n    },\n    \n    // 添加新方法，不调用API而是在前端检查匹配\n    checkAnswerMatching(userAnswer) {\n      if (!this.gameSession || !this.gameSession.currentQuestion) return;\n      \n      console.log('检查答案:', userAnswer);\n      console.log('答案长度:', userAnswer.length);\n      \n      // 如果输入的字符足够多（至少5个字符），尝试提交到服务器\n      if (userAnswer.length >= 5) {\n        console.log('提交答案到服务器');\n        this.submitAnswer(userAnswer);\n      }\n    },\n    \n    // 点击模式：从答案中移除字符\n    removeFromAnswer(item) {\n      const index = this.answerArray.indexOf(item);\n      if (index > -1) {\n        this.answerArray.splice(index, 1); // 从答案中移除选中的按钮\n      }\n    },\n    \n    // 检查答案并提交\n    checkAndSubmitAnswer() {\n      if (this.answerArray.length === 0) {\n        this.showErrorMessage('请输入答案');\n        return;\n      }\n      \n      // 组合用户输入的答案\n      const userAnswer = this.answerArray.join('');\n      \n      // 提交答案\n      this.submitAnswer(userAnswer);\n    },\n    \n    // 显示游戏结果\n    finalScore(isWin) {\n      console.log('调用finalScore, isWin:', isWin);\n      \n      if (isWin) {\n        // 确保游戏结果状态被设置为正确\n        this.gameResult.isCorrect = true;\n        console.log('finalScore设置游戏状态为正确:', this.gameResult);\n        \n        // 直接向界面显示消息\n        //this.showSuccessMessage('恭喜，回答正确!');\n      } else {\n        // 不显示错误信息\n        return;\n      }\n      // 不关闭弹窗，让用户自己关闭\n    },\n    \n    // 设置游戏卡片的样式\n    getStyle(index) {\n      const state = this.stateOfGrid[index];\n      return {\n        backgroundImage: state === 1\n          ? 'url(/image/before.png)'\n          : 'url(/image/win.png)',\n        width: '30px',\n        height: '30px',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        padding: '5px'\n      };\n    },\n    \n    // 更新页面\n    handlePageChange(newPage) {\n      console.log('切换到第', newPage, '页');\n      this.currentPage = newPage;  // 更新当前页\n      \n      // 确保当前页有数据\n      this.loadQuestionsForPage(newPage);\n      \n      // 如果缓存中没有该页数据，重新生成\n      if (!this.questionsOfGridData || this.questionsOfGridData.length === 0) {\n        console.log('当前页数据为空，重新生成数据');\n        // 生成模拟的九宫格数据，每页10关\n        const mockQuestions = [];\n        for (let i = 0; i < 10; i++) {\n          const index = (newPage - 1) * 10 + i;\n          mockQuestions.push({\n            id: `question_${index}`,\n            question: [\n              ['春', '眠', '不'],\n              ['觉', '晓', '处'],\n              ['闻', '啼', '鸟']\n            ],\n            answer: '春眠不觉晓，处处闻啼鸟'\n          });\n        }\n        \n        // 更新本页的问题数据\n        this.questionsOfGridData = mockQuestions;\n        \n        console.log('页面切换：已重新生成数据，长度为', mockQuestions.length);\n      }\n    },\n    \n    // 切换游戏模式\n    toggleMode() {\n      this.voiceMode = !this.voiceMode;\n    },\n    \n    // 录音功能\n    startRecording() {\n      this.isRecording = true;  // Set recording status to true\n      this.timer = setTimeout(() => {\n        this.stopRecording();  // Automatically stop recording after 10 seconds\n      }, 10000);  // 10 seconds\n\n      // Use axios to send POST request\n      axios.post('/api/audio/record', { duration: 10 })\n        .then(response => {\n          if (response.data.file_name) {\n            console.log(\"Recording completed. File saved as: \" + response.data.file_name);\n            // Perform further actions with the recorded file name\n            this.startRecognition(response.data.file_name);\n          } else {\n            console.log(\"Error recording audio:\", response.data);\n          }\n        })\n        .catch(error => {\n          console.error(\"Error starting recording:\", error);\n        });\n    },\n\n    stopRecording() {\n      this.isRecording = false;  // Stop recording\n      console.log('Recording stopped automatically after 10 seconds.');\n    },\n\n    startRecognition(fileName) {\n      fetch('/api/audio/recognize', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ file_name: fileName })\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (data.result) {\n            console.log(\"Recognition result:\", data.result);\n            // 去掉标点符号并更新 data.result\n            const cleanResult = data.result.replace(/[，。？！；：\"\"''【】()（）《》、，。、。]/g, '');\n\n            // 将去掉标点后的每个字符添加到 answerArray 中\n            for (const char of cleanResult) {\n              this.answerArray.push(char);\n            }\n\n            // 提交语音识别的答案\n            this.submitAnswer(cleanResult);\n\n          } else {\n            console.log(\"Error during recognition:\", data);\n          }\n        })\n        .catch(error => {\n          console.error(\"Error starting recognition:\", error);\n        });\n    },\n\n    // 添加一个显示成功消息的方法\n    showSuccessMessage(message) {\n      // 使用轻量级的提示，不影响游戏界面\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    \n    // 开始倒计时\n    startCountdown() {\n      this.countdown.time = 10;\n      this.countdown.isActive = true;\n      this.showAnswer = false;\n      \n      // 清除可能存在的旧定时器\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n      }\n      \n      this.countdown.timer = setInterval(() => {\n        if (this.countdown.time > 0) {\n          this.countdown.time--;\n        } else {\n          this.timeUp();\n        }\n      }, 1000);\n    },\n    \n    // 时间到处理\n    timeUp() {\n      clearInterval(this.countdown.timer);\n      this.countdown.isActive = false;\n      this.showAnswer = true;\n      \n      // 如果还没答对，显示正确答案\n      if (!this.gameResult.isCorrect) {\n        this.gameResult.correctAnswer = this.gameSession.currentQuestion.answer;\n      }\n    },\n    \n    // 清理倒计时\n    clearCountdown() {\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n        this.countdown.timer = null;\n      }\n      this.countdown.isActive = false;\n      this.showAnswer = false;\n    }\n  },\n  watch: {\n    currentPage(newPage, oldPage) {\n      console.log('页面从', oldPage, '变为', newPage);\n      // 确保新页面数据加载\n      this.loadQuestionsForPage(newPage);\n    }\n  },\n  beforeUnmount() {\n    if (this.countdown.timer) {\n      clearInterval(this.countdown.timer);\n      this.countdown.timer = null;\n    }\n    this.countdown.isActive = false;\n    this.showAnswer = false;\n  }\n}\n</script>\n\n<style scoped>\n.body {\n  font-family: \"宋体\", sans-serif;\n  background-color: #f8f4e9;\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-image: url('../assets/image/he.gif');\n  background-size: cover;\n  background-position: center;\n  color: #333;\n  background-repeat: repeat;\n}\n\n.rules-container {\n  min-height: 90vh;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n  padding-top: 40px;\n}\n\n.background-container {\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.93) 100%);\n  background-image: \n    linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.93) 100%),\n    url(\"data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23614124' fill-opacity='0.08' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\");\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 60vw;\n  min-height: 60vh;\n  position: relative;\n  border-radius: 20px;\n  box-shadow: 0 4px 25px rgba(139, 69, 19, 0.12);\n  border: 2px solid rgba(139, 69, 19, 0.25);\n  margin: 0 auto;\n}\n\n.background-container p {\n  margin: 15px auto;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n  text-align: center;\n}\n\n.title {\n  font-size: 2em !important;\n  margin-bottom: 15px !important;\n  font-weight: bold;\n}\n\n.subtitle {\n  font-size: 1.2em !important;\n  margin-top: 20px !important;\n}\n\n.game-rule-text {\n  width: 80%;\n  margin: 20px auto;\n  text-align: left;\n  white-space: normal;\n  word-wrap: break-word;\n  word-break: break-all;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.1em;\n  line-height: 1.8;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.8) 0%, rgba(245, 236, 220, 0.85) 100%);\n  padding: 20px 30px;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(139, 69, 19, 0.1);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n}\n\n.game-content {\n  padding: 20px;\n  min-height: 100vh;\n  width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.game-card-container {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 20px;\n  width: 90%;\n  margin: 2vh auto;\n  padding: 15px;\n}\n\n.game-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  box-sizing: border-box;\n  background-color: transparent;\n  border-radius: 10px;\n  padding: 15px;\n  box-shadow: none;\n  transition: transform 0.3s ease;\n  position: relative;\n}\n\n.level {\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.85) 0%, rgba(248, 244, 233, 0.95) 100%);\n  padding: 8px 20px;\n  border-radius: 15px;\n  margin-bottom: 15px;\n  position: relative;\n  backdrop-filter: blur(3px);\n  border: 1px solid rgba(139, 69, 19, 0.1);\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  width: fit-content;\n  margin: 0 auto 15px;\n}\n\n.page {\n  margin: 2vh auto;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 10px 15px;\n  border-radius: 5px;\n  margin: 10px auto;\n  max-width: 80%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: fit-content;\n}\n\n.success-message, .error-feedback {\n  margin: 10px auto;\n  padding: 10px;\n  width: 85%;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border-radius: 8px;\n  color: #8B4513;\n  text-align: center;\n  font-weight: bold;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);\n  animation: fadeIn 0.5s;\n  border: 1px solid rgba(139, 69, 19, 0.2);\n}\n\n.correct-answer-text {\n  margin-top: 10px;\n  font-size: 18px;\n  color: #8B4513;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  text-align: center;\n  width: 100%;\n}\n\n.user-answer {\n  margin-top: 8px;\n  font-size: 16px;\n  color: #8B4513;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  text-align: center;\n  width: 100%;\n}\n\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from, .fade-leave-to {\n  opacity: 0;\n}\n\n.start-game-btn {\n  margin: 30px auto 0;\n  padding: 12px 40px;\n  font-size: 1.2em;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n.back-to-rules-btn {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 8px 20px;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n  border-radius: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  z-index: 100;\n}\n\n.mode-selection {\n    margin: 20px auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 15px;\n    font-family: \"楷体\", \"STKaiti\", serif;\n    font-size: 1.2em;\n}\n\n.mode-selection span {\n    transition: all 0.3s ease;\n    color: #8B4513;\n    opacity: 0.6;\n    position: relative;\n    cursor: pointer;\n    text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n}\n\n.mode-selection span.active {\n    color: #8B4513;\n    opacity: 1;\n    font-weight: bold;\n}\n\n.mode-selection span.active::after {\n    content: '';\n    position: absolute;\n    bottom: -3px;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, #8B4513, transparent);\n    animation: fadeIn 0.3s ease;\n}\n\n.modeSelect {\n    width: 20px;\n    height: 50px;\n    background-image: url('../assets/image/modeButton.png');\n    background-size: cover;\n    background-repeat: no-repeat;\n    cursor: pointer;\n    border: none;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n    background-color: transparent;\n    opacity: 0.8;\n}\n\n.modeSelect:hover {\n    opacity: 1;\n}\n\n.modeSelect.active {\n    transform: rotateY(180deg);\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  z-index: 10;\n  color: #333;\n  padding: 5px 10px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n}\n\n.overlay {\n  position: fixed;\n  /* 设置为 fixed 定位，使蒙版固定在页面上 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  /* 半透明黑色背景，遮挡周围区域 */\n  display: flex;\n  /* 使用 flexbox 来居中内容 */\n  justify-content: center;\n  /* 水平居中 */\n  align-items: center;\n  /* 垂直居中 */\n  z-index: 1000;\n  /* 确保蒙版显示在最上层 */\n  flex-direction: column;\n  background-size: cover;\n  /* 确保背景图片填满容器 */\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n}\n\n.overlay-content {\n  width: 500px;\n  height: 500px;\n  padding: 20px;\n  box-sizing: border-box;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.97) 0%, rgba(245, 236, 220, 0.95) 100%);\n  background-image: \n    linear-gradient(135deg, rgba(238, 226, 203, 0.97) 0%, rgba(245, 236, 220, 0.95) 100%),\n    url(\"data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23614124' fill-opacity='0.08' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\");\n  border: 2px solid rgba(139, 69, 19, 0.25);\n  border-radius: 15px;\n  opacity: 1;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(139, 69, 19, 0.15);\n}\n\n.boardOfNine {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 20px;\n    box-sizing: border-box;\n}\n\n.grid-item {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 20px auto 10px;\n    width: 85%;\n}\n\n.answer {\n    margin: 10px auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 5px;\n    min-height: 40px;\n    padding: 10px;\n    background: linear-gradient(135deg, rgba(248, 244, 233, 0.4) 0%, rgba(248, 244, 233, 0.6) 100%);\n    border: 1px solid rgba(139, 69, 19, 0.15);\n    border-radius: 8px;\n    width: 85%;\n    backdrop-filter: blur(3px);\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);\n}\n\n.success-icon {\n    font-size: 32px;\n    margin-bottom: 10px;\n    color: #8B4513;\n}\n\n.start-recording-btn {\n    margin: 10px auto;\n    display: block;\n    background-color: #2196F3;\n    color: white;\n    padding: 10px 20px;\n    font-size: 16px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    font-weight: bold;\n    transition: background-color 0.3s;\n}\n\n.grid-row {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    margin-bottom: 5px;\n}\n\n.grid-button {\n  width: 70px;\n  height: 70px;\n  font-size: 24px;\n  font-weight: bold;\n  cursor: pointer;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.9) 100%);\n  border: 2px solid rgba(139, 69, 19, 0.4);\n  border-radius: 8px;\n  margin: 0 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.15);\n  transition: all 0.3s ease;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);\n}\n\n.grid-button:hover {\n  background: linear-gradient(135deg, rgba(245, 236, 220, 0.98) 0%, rgba(238, 226, 203, 0.93) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(139, 69, 19, 0.2);\n  border-color: rgba(139, 69, 19, 0.6);\n}\n\n.answer-button {\n  width: 40px;\n  height: 40px;\n  font-size: 16px;\n  cursor: pointer;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.8) 0%, rgba(248, 244, 233, 0.9) 100%);\n  border: 2px solid rgba(139, 69, 19, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 2px;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n}\n\n.answer-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.1);\n  border-color: rgba(139, 69, 19, 0.5);\n}\n\n/* 覆盖分页的按钮背景色 */\n.el-pagination .el-pager li {\n  background-image: linear-gradient(to top, #fddb92 0%, #d1fdff 100%);\n  border-radius: 5px;\n  /* 设置圆角 */\n}\n\n.el-pagination .el-icon-arrow-left,\n.el-pagination .el-icon-arrow-right {\n  font-size: 20px;\n  /* 改变箭头图标的大小 */\n  background-image: linear-gradient(to top, #fddb92 0%, #d1fdff 100%);\n}\n\n.game-info {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  background-color: rgba(255, 255, 255, 0.7);\n  border-radius: 5px;\n  font-weight: bold;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.countdown-display {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.9) 100%);\n  padding: 8px 15px;\n  border-radius: 8px;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  font-size: 1.1em;\n  border: 1px solid rgba(139, 69, 19, 0.3);\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.1);\n}\n\n.timeout-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.98) 0%, rgba(245, 236, 220, 0.95) 100%);\n  padding: 20px 30px;\n  border-radius: 12px;\n  text-align: center;\n  border: 2px solid rgba(139, 69, 19, 0.3);\n  box-shadow: 0 4px 15px rgba(139, 69, 19, 0.15);\n  z-index: 1000;\n}\n\n.timeout-message div {\n  margin: 10px 0;\n  color: #614124;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}