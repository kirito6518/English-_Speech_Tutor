{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavbarPage from './NavbarPage.vue';\nimport axios from 'axios';\nexport default {\n  name: 'GamePage',\n  data() {\n    return {\n      gameStarted: false,\n      // 控制游戏是否开始\n      voiceMode: false,\n      // Controls the mode, true for voice mode, false for click mode\n      isOverlayVisible: false,\n      // 控制蒙版显示/隐藏\n      currentIndex: null,\n      // 记录当前点击的卡片索引\n\n      // 游戏状态数据\n      gameSession: {\n        sessionId: null,\n        currentQuestion: null,\n        questionNumber: 0,\n        totalQuestions: 0,\n        score: 0,\n        gameCompleted: false,\n        allQuestions: [] // 存储所有题目信息\n      },\n      // 保存每个关卡的游戏会话数据\n      levelGameSessions: {},\n      // 页面加载状态\n      pagesLoaded: {},\n      // 页面显示数据\n      questionsOfGridData: [],\n      totalOfGame: 50,\n      currentPage: 1,\n      answerArray: [],\n      // Store the answers\n      stateOfGrid: Array(50).fill(1),\n      // 初始状态都是未完成\n      isRecording: false,\n      // 错误状态\n      errorMessage: '',\n      showError: false,\n      // 游戏结果\n      gameResult: {\n        isCorrect: false,\n        correctAnswer: '',\n        message: '',\n        userAnswer: ''\n      },\n      countdown: {\n        time: 10,\n        timer: null,\n        isActive: false\n      },\n      showAnswer: false\n    };\n  },\n  components: {\n    NavbarPage\n  },\n  mounted() {\n    // 加载第一页的九宫格题目\n    this.loadQuestionsForPage(1);\n    this.pagesLoaded[1] = true;\n    console.log('初始化加载第1页数据');\n  },\n  computed: {\n    currentPageQuestions() {\n      console.log('计算当前页显示数据，当前页:', this.currentPage, '数据长度:', this.questionsOfGridData.length);\n      if (this.questionsOfGridData.length === 0) {\n        console.log('当前没有题目数据，返回空数组');\n        return [];\n      }\n\n      // 确保每页显示10个问题\n      const questionsPerPage = 10;\n      const result = [];\n      for (let i = 0; i < questionsPerPage; i++) {\n        if (i < this.questionsOfGridData.length) {\n          result.push(this.questionsOfGridData[i]);\n        } else {\n          // 如果数据不足，添加默认问题\n          result.push({\n            id: `question_default_${i}`,\n            question: [['空', '空', '空'], ['空', '空', '空'], ['空', '空', '空']],\n            answer: '默认题目'\n          });\n        }\n      }\n      console.log('当前页显示', result.length, '个问题');\n      return result;\n    }\n  },\n  methods: {\n    startGame() {\n      this.gameStarted = true;\n    },\n    backToRules() {\n      this.gameStarted = false;\n    },\n    // 加载指定页的九宫格题目\n    loadQuestionsForPage(page) {\n      console.log('加载第', page, '页的九宫格题目');\n\n      // 如果该页已经加载过，则不重复生成\n      if (this.pagesLoaded[page]) {\n        console.log('该页已加载过，使用缓存数据');\n        return;\n      }\n\n      // 生成模拟的九宫格数据，每页10关\n      const mockQuestions = [];\n      for (let i = 0; i < 10; i++) {\n        const index = (page - 1) * 10 + i;\n        mockQuestions.push({\n          id: `question_${index}`,\n          question: [['春', '眠', '不'], ['觉', '晓', '处'], ['闻', '啼', '鸟']],\n          answer: '春眠不觉晓，处处闻啼鸟'\n        });\n      }\n\n      // 更新本页的问题数据\n      this.questionsOfGridData = mockQuestions;\n\n      // 标记该页已加载\n      this.pagesLoaded[page] = true;\n      console.log('页面数据加载完成，生成了', mockQuestions.length, '个问题');\n    },\n    // 创建新游戏\n    async createGame() {\n      try {\n        // 如果已有会话ID，则重用\n        if (this.gameSession.sessionId) {\n          console.log('使用现有游戏会话:', this.gameSession.sessionId);\n          return true;\n        }\n        console.log('创建新游戏会话');\n        // 调用创建游戏API\n        const response = await axios.post('/api/ninegrid/create', {}, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const gameData = response.data;\n        console.log('创建游戏响应:', gameData);\n\n        // 保存游戏会话信息\n        this.gameSession = {\n          sessionId: gameData.session_id,\n          currentQuestion: gameData.question,\n          questionNumber: gameData.question_number,\n          totalQuestions: gameData.total_questions,\n          score: gameData.score,\n          gameCompleted: false,\n          allQuestions: [] // 会在提交答案时获取\n        };\n        return true;\n      } catch (error) {\n        console.error('创建游戏失败:', error);\n        this.showErrorMessage('创建游戏失败，请稍后再试');\n        return false;\n      }\n    },\n    // 提交用户答案\n    async submitAnswer(userAnswer) {\n      try {\n        // 如果已经回答正确，不再提交\n        if (this.gameResult.isCorrect) {\n          console.log('已经回答正确，不再提交');\n          return;\n        }\n        console.log('提交答案:', userAnswer, '当前关卡索引:', this.currentIndex);\n\n        // 调用提交答案API\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: userAnswer,\n          question_index: this.currentIndex // 添加题目索引参数\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('服务器响应:', response.data);\n        const result = response.data;\n\n        // 更新游戏状态\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions;\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        console.log('是否正确:', result.is_correct);\n\n        // 明确设置游戏结果状态\n        this.gameResult.isCorrect = result.is_correct;\n        this.gameResult.correctAnswer = result.correct_answer;\n        this.gameResult.userAnswer = result.recognized_text;\n        this.gameResult.message = result.is_correct ? '回答正确！' : `回答错误！正确答案是：${result.correct_answer}`;\n        console.log('更新后的游戏结果状态:', this.gameResult);\n\n        // 如果答对了，清除倒计时\n        if (result.is_correct) {\n          this.clearCountdown();\n          this.stateOfGrid[this.currentIndex] = 0;\n          this.finalScore(true);\n        } else {\n          // 显示错误信息\n          //this.showErrorMessage(`答案不正确，再试试吧！`);\n        }\n\n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[this.currentIndex] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('提交答案失败:', error);\n        this.showErrorMessage('提交答案失败，请稍后再试');\n      }\n    },\n    // 显示错误消息\n    showErrorMessage(message) {\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    // 显示九宫格题目\n    async showOverlay(index) {\n      console.log('打开关卡:', index, '所在页:', Math.floor(index / 10) + 1);\n      this.currentIndex = index; // Set the current question index\n\n      // 重置游戏结果状态\n      this.gameResult.isCorrect = false;\n      this.gameResult.correctAnswer = '';\n      this.gameResult.userAnswer = '';\n      this.gameResult.message = '';\n\n      // 检查该关卡是否已有游戏会话数据\n      if (!this.levelGameSessions[index]) {\n        // 如果游戏会话不存在，创建新的游戏会话\n        if (!this.gameSession.sessionId) {\n          // 创建新游戏\n          const success = await this.createGame();\n          if (!success) return;\n        }\n        console.log('创建关卡数据，关卡索引:', index);\n        // 保存当前关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } else {\n        console.log('使用已有关卡数据，关卡索引:', index);\n        // 使用之前保存的游戏会话数据\n        this.gameSession = JSON.parse(JSON.stringify(this.levelGameSessions[index]));\n      }\n\n      // 获取当前关卡的题目\n      try {\n        console.log('获取题目，关卡索引:', index, '会话ID:', this.gameSession.sessionId);\n\n        // 确保游戏会话ID存在\n        if (!this.gameSession.sessionId) {\n          console.error('游戏会话ID不存在，无法获取题目');\n          this.showErrorMessage('游戏初始化失败，请刷新页面重试');\n          return;\n        }\n\n        // 提交一个空答案来获取当前关卡的题目\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: '',\n          // 空答案，只是为了获取题目\n          question_index: index // 明确指定要获取的题目索引\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('获取题目响应(完整数据):', JSON.stringify(response.data));\n        const result = response.data;\n\n        // 打印关键数据\n        console.log('当前题目原始数据:', result.current_question);\n        console.log('题目标题类型:', typeof result.current_question.title);\n        if (Array.isArray(result.current_question.title)) {\n          console.log('题目是数组, 长度:', result.current_question.title.length);\n          if (result.current_question.title.length > 0) {\n            console.log('第一个元素类型:', typeof result.current_question.title[0]);\n          }\n        }\n\n        // 确保currentQuestion存在并且有正确结构\n        if (!result.current_question) {\n          result.current_question = {\n            title: [['', '', ''], ['', '', ''], ['', '', '']],\n            answer: ''\n          };\n        }\n\n        // 确保currentQuestion.title是二维数组格式\n        if (result.current_question && result.current_question.title) {\n          // 检查title是否已经是二维数组\n          const title = result.current_question.title;\n          console.log('原始title数据:', JSON.stringify(title));\n\n          // 确保title是二维数组\n          let formattedTitle;\n          if (Array.isArray(title) && Array.isArray(title[0])) {\n            // 已经是二维数组，不需要转换\n            formattedTitle = title;\n          } else if (Array.isArray(title)) {\n            // 一维数组，转为3x3格式\n            // 检查数组长度是否为9\n            if (title.length === 9) {\n              formattedTitle = [title.slice(0, 3), title.slice(3, 6), title.slice(6, 9)];\n            } else {\n              // 如果长度不是9，尝试取前9个元素或填充\n              const normalizedArray = [...title];\n              while (normalizedArray.length < 9) {\n                normalizedArray.push('');\n              }\n              formattedTitle = [normalizedArray.slice(0, 3), normalizedArray.slice(3, 6), normalizedArray.slice(6, 9)];\n            }\n          } else if (typeof title === 'string') {\n            // 字符串，转为3x3格式\n            const chars = title.split('');\n            // 确保长度为9\n            while (chars.length < 9) {\n              chars.push('');\n            }\n            formattedTitle = [chars.slice(0, 3), chars.slice(3, 6), chars.slice(6, 9)];\n          } else {\n            // 未知格式，使用默认空二维数组\n            formattedTitle = [['', '', ''], ['', '', ''], ['', '', '']];\n            console.error('未知的title格式:', typeof title, title);\n          }\n          console.log('格式化后的title:', JSON.stringify(formattedTitle));\n\n          // 更新题目\n          result.current_question.title = formattedTitle;\n        }\n\n        // 更新当前题目\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions || [];\n\n        // 打印当前题目格式\n        console.log('最终题目数据:', JSON.stringify(this.gameSession.currentQuestion));\n\n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('获取题目失败:', error);\n        this.showErrorMessage('获取题目失败，请稍后再试');\n        return;\n      }\n\n      // 清空答案数组\n      this.answerArray = [];\n\n      // 在获取题目后启动倒计时\n      this.startCountdown();\n\n      // 显示九宫格\n      this.isOverlayVisible = true;\n      if (this.voiceMode) {\n        this.startRecording();\n      }\n    },\n    hideOverlay() {\n      this.isOverlayVisible = false;\n      this.answerArray = [];\n      this.clearCountdown(); // 清理倒计时\n    },\n    // 点击模式：添加字符到答案\n    addToAnswer(item) {\n      // 如果已经回答正确，不再添加新字符\n      if (this.gameResult.isCorrect) {\n        return;\n      }\n      this.answerArray.push(item); // 将用户点击的字符添加到答案数组\n\n      // 在每次添加字符后检查答案\n      if (this.gameSession && this.gameSession.currentQuestion) {\n        // 组合用户当前输入的答案\n        const userAnswer = this.answerArray.join('');\n\n        // 每输入一个字符就尝试检查答案，不管长度\n        this.checkAnswerMatching(userAnswer);\n      }\n    },\n    // 添加新方法，不调用API而是在前端检查匹配\n    checkAnswerMatching(userAnswer) {\n      if (!this.gameSession || !this.gameSession.currentQuestion) return;\n      console.log('检查答案:', userAnswer);\n      console.log('答案长度:', userAnswer.length);\n\n      // 如果输入的字符足够多（至少5个字符），尝试提交到服务器\n      if (userAnswer.length >= 5) {\n        console.log('提交答案到服务器');\n        this.submitAnswer(userAnswer);\n      }\n    },\n    // 点击模式：从答案中移除字符\n    removeFromAnswer(item) {\n      const index = this.answerArray.indexOf(item);\n      if (index > -1) {\n        this.answerArray.splice(index, 1); // 从答案中移除选中的按钮\n      }\n    },\n    // 检查答案并提交\n    checkAndSubmitAnswer() {\n      if (this.answerArray.length === 0) {\n        this.showErrorMessage('请输入答案');\n        return;\n      }\n\n      // 组合用户输入的答案\n      const userAnswer = this.answerArray.join('');\n\n      // 提交答案\n      this.submitAnswer(userAnswer);\n    },\n    // 显示游戏结果\n    finalScore(isWin) {\n      console.log('调用finalScore, isWin:', isWin);\n      if (isWin) {\n        // 确保游戏结果状态被设置为正确\n        this.gameResult.isCorrect = true;\n        console.log('finalScore设置游戏状态为正确:', this.gameResult);\n\n        // 直接向界面显示消息\n        //this.showSuccessMessage('恭喜，回答正确!');\n      } else {\n        // 不显示错误信息\n        return;\n      }\n      // 不关闭弹窗，让用户自己关闭\n    },\n    // 设置游戏卡片的样式\n    getStyle(index) {\n      const state = this.stateOfGrid[index];\n      return {\n        backgroundImage: state === 1 ? 'url(/image/before.png)' : 'url(/image/win.png)',\n        width: '30px',\n        height: '30px',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        padding: '5px'\n      };\n    },\n    // 更新页面\n    handlePageChange(newPage) {\n      console.log('切换到第', newPage, '页');\n      this.currentPage = newPage; // 更新当前页\n\n      // 确保当前页有数据\n      this.loadQuestionsForPage(newPage);\n\n      // 如果缓存中没有该页数据，重新生成\n      if (!this.questionsOfGridData || this.questionsOfGridData.length === 0) {\n        console.log('当前页数据为空，重新生成数据');\n        // 生成模拟的九宫格数据，每页10关\n        const mockQuestions = [];\n        for (let i = 0; i < 10; i++) {\n          const index = (newPage - 1) * 10 + i;\n          mockQuestions.push({\n            id: `question_${index}`,\n            question: [['春', '眠', '不'], ['觉', '晓', '处'], ['闻', '啼', '鸟']],\n            answer: '春眠不觉晓，处处闻啼鸟'\n          });\n        }\n\n        // 更新本页的问题数据\n        this.questionsOfGridData = mockQuestions;\n        console.log('页面切换：已重新生成数据，长度为', mockQuestions.length);\n      }\n    },\n    // 切换游戏模式\n    toggleMode() {\n      this.voiceMode = !this.voiceMode;\n    },\n    // 录音功能\n    startRecording() {\n      this.isRecording = true; // Set recording status to true\n      this.timer = setTimeout(() => {\n        this.stopRecording(); // Automatically stop recording after 10 seconds\n      }, 10000); // 10 seconds\n\n      // Use axios to send POST request\n      axios.post('/api/audio/record', {\n        duration: 10\n      }).then(response => {\n        if (response.data.file_name) {\n          console.log(\"Recording completed. File saved as: \" + response.data.file_name);\n          // Perform further actions with the recorded file name\n          this.startRecognition(response.data.file_name);\n        } else {\n          console.log(\"Error recording audio:\", response.data);\n        }\n      }).catch(error => {\n        console.error(\"Error starting recording:\", error);\n      });\n    },\n    stopRecording() {\n      this.isRecording = false; // Stop recording\n      console.log('Recording stopped automatically after 10 seconds.');\n    },\n    startRecognition(fileName) {\n      fetch('/api/audio/recognize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file_name: fileName\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.result) {\n          console.log(\"Recognition result:\", data.result);\n          // 去掉标点符号并更新 data.result\n          const cleanResult = data.result.replace(/[，。？！；：\"\"''【】()（）《》、，。、。]/g, '');\n\n          // 将去掉标点后的每个字符添加到 answerArray 中\n          for (const char of cleanResult) {\n            this.answerArray.push(char);\n          }\n\n          // 提交语音识别的答案\n          this.submitAnswer(cleanResult);\n        } else {\n          console.log(\"Error during recognition:\", data);\n        }\n      }).catch(error => {\n        console.error(\"Error starting recognition:\", error);\n      });\n    },\n    // 添加一个显示成功消息的方法\n    showSuccessMessage(message) {\n      // 使用轻量级的提示，不影响游戏界面\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    // 开始倒计时\n    startCountdown() {\n      this.countdown.time = 10;\n      this.countdown.isActive = true;\n      this.showAnswer = false;\n\n      // 清除可能存在的旧定时器\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n      }\n      this.countdown.timer = setInterval(() => {\n        if (this.countdown.time > 0) {\n          this.countdown.time--;\n        } else {\n          this.timeUp();\n        }\n      }, 1000);\n    },\n    // 时间到处理\n    timeUp() {\n      clearInterval(this.countdown.timer);\n      this.countdown.isActive = false;\n      this.showAnswer = true;\n\n      // 如果还没答对，显示正确答案\n      if (!this.gameResult.isCorrect) {\n        this.gameResult.correctAnswer = this.gameSession.currentQuestion.answer;\n      }\n    },\n    // 清理倒计时\n    clearCountdown() {\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n        this.countdown.timer = null;\n      }\n      this.countdown.isActive = false;\n      this.showAnswer = false;\n    }\n  },\n  watch: {\n    currentPage(newPage, oldPage) {\n      console.log('页面从', oldPage, '变为', newPage);\n      // 确保新页面数据加载\n      this.loadQuestionsForPage(newPage);\n    }\n  },\n  beforeUnmount() {\n    if (this.countdown.timer) {\n      clearInterval(this.countdown.timer);\n      this.countdown.timer = null;\n    }\n    this.countdown.isActive = false;\n    this.showAnswer = false;\n  }\n};","map":{"version":3,"names":["NavbarPage","axios","name","data","gameStarted","voiceMode","isOverlayVisible","currentIndex","gameSession","sessionId","currentQuestion","questionNumber","totalQuestions","score","gameCompleted","allQuestions","levelGameSessions","pagesLoaded","questionsOfGridData","totalOfGame","currentPage","answerArray","stateOfGrid","Array","fill","isRecording","errorMessage","showError","gameResult","isCorrect","correctAnswer","message","userAnswer","countdown","time","timer","isActive","showAnswer","components","mounted","loadQuestionsForPage","console","log","computed","currentPageQuestions","length","questionsPerPage","result","i","push","id","question","answer","methods","startGame","backToRules","page","mockQuestions","index","createGame","response","post","headers","gameData","session_id","question_number","total_questions","error","showErrorMessage","submitAnswer","question_index","all_questions","current_question","is_correct","correct_answer","recognized_text","clearCountdown","finalScore","JSON","parse","stringify","setTimeout","showOverlay","Math","floor","success","title","isArray","formattedTitle","slice","normalizedArray","chars","split","startCountdown","startRecording","hideOverlay","addToAnswer","item","join","checkAnswerMatching","removeFromAnswer","indexOf","splice","checkAndSubmitAnswer","isWin","getStyle","state","backgroundImage","width","height","backgroundSize","backgroundRepeat","backgroundPosition","padding","handlePageChange","newPage","toggleMode","stopRecording","duration","then","file_name","startRecognition","catch","fileName","fetch","method","body","json","cleanResult","replace","char","showSuccessMessage","clearInterval","setInterval","timeUp","watch","oldPage","beforeUnmount"],"sources":["D:\\HCI_FINAL\\new_copy\\frontend\\src\\components\\GameMode.vue"],"sourcesContent":["<template>\n  <div class=\"body\">\n    <NavbarPage />\n\n    <!-- 游戏规则页面 -->\n    <transition name=\"fade\">\n      <div v-if=\"!gameStarted\" class=\"rules-container\">\n        <div class=\"background-container\">\n          <p class=\"title\">九宫格游戏</p>\n          <p class=\"game-rule-text\">\n            游戏规则：每关游戏将给出一个九宫格，九宫格中包含一句五言或七言诗句，你需要找出正确的诗句。\n            你可以在下方选择闯关模式。\n            语音模式需要在10秒内说出正确的答案，注意：只有一次作答机会；\n            点击模式需要在10秒内按顺序点击九宫格内的汉字卡片，如果点错了可以在作答区点击清除。\n          </p>\n          <p class=\"subtitle\">你准备好接受挑战了吗？让我们开始吧！</p>\n\n          <div class=\"mode-selection\">\n            <span :class=\"{ active: voiceMode }\">语音模式</span>\n            <button id=\"modeSelect\" class=\"modeSelect\" @click=\"toggleMode\" :class=\"{ active: voiceMode }\"></button>\n            <span :class=\"{ active: !voiceMode }\">点击模式</span>\n          </div>\n\n          <button class=\"start-game-btn\" @click=\"startGame\">开始游戏</button>\n        </div>\n      </div>\n    </transition>\n\n    <!-- 游戏内容页面 -->\n    <transition name=\"fade\">\n      <div v-if=\"gameStarted\" class=\"game-content\">\n        <div v-if=\"showError\" class=\"error-message\">{{ errorMessage }}</div>\n        <div class=\"game-card-container\">\n          <div v-for=\"(question, index) in currentPageQuestions\" :key=\"index\" class=\"game-card\">\n            <div class=\"level\">第{{ index + 1 + (currentPage - 1) * 10 }}关</div>\n            <img :src=\"require(`@/assets/image/game${(index % 10) + 1}.png`)\" style=\"border-radius: 20px; width: 100%; height: auto; cursor: pointer;\"\n              @click=\"showOverlay(index + (currentPage - 1) * 10)\">\n            <div class=\"game-item\" :style=\"getStyle(index + (currentPage - 1) * 10)\"></div>\n          </div>\n        </div>\n\n        <div class=\"page\">\n          <el-pagination background layout=\"prev, pager, next\" :total=\"totalOfGame\" class=\"mt-4\" :page-size=\"10\"\n            :current-page=\"currentPage\" @current-change=\"handlePageChange\"></el-pagination>\n        </div>\n\n        <button class=\"back-to-rules-btn\" @click=\"backToRules\">返回规则</button>\n      </div>\n    </transition>\n\n    <!-- Overlay -->\n    <div v-if=\"isOverlayVisible\" class=\"overlay\" @click.self=\"hideOverlay\">\n      <div class=\"overlay-content\">\n        <!-- 添加倒计时显示 -->\n        <div class=\"countdown-display\" v-if=\"countdown.isActive\">\n          剩余时间：{{ countdown.time }}秒\n        </div>\n        \n        <!-- 添加时间到显示 -->\n        <div v-if=\"showAnswer && !gameResult.isCorrect\" class=\"timeout-message\">\n          <div>时间到！</div>\n          <div class=\"correct-answer-text\">\n            正确答案: {{ gameResult.correctAnswer }}\n          </div>\n        </div>\n\n        <!-- Game Question -->\n        <div class=\"boardOfNine\">\n          <button class=\"close-button\" @click=\"hideOverlay\">&times;</button>\n\n          <!-- 点击模式 -->\n          <div v-if=\"!voiceMode\">\n            <div class=\"grid-item\">\n              <div v-for=\"(row, rowIndex) in gameSession.currentQuestion.title\" :key=\"rowIndex\"\n                class=\"grid-row\">\n                <button v-for=\"(item, colIndex) in row\" :key=\"colIndex\" @click=\"addToAnswer(item)\" class=\"grid-button\"\n                  :class=\"{ 'correct-grid': gameResult.isCorrect, 'wrong-grid': gameResult.userAnswer && !gameResult.isCorrect }\">\n                  {{ item }}\n                </button>\n              </div>\n            </div>\n\n            <!-- Answer area -->\n            <div class=\"answer\">\n              <div v-for=\"(answer, index) in answerArray\" :key=\"index\" @click=\"removeFromAnswer(answer)\">\n                <button class=\"answer-button\" :class=\"{ 'correct-answer-btn': gameResult.isCorrect }\">{{ answer }}</button>\n              </div>\n            </div>\n            \n            <!-- 答案反馈区 -->\n            <div v-if=\"gameResult.isCorrect\" class=\"success-message\">\n              <div class=\"success-icon\">✓</div>\n              <div>恭喜，回答正确!</div>\n              <div class=\"correct-answer-text\">\n                正确答案: {{ gameResult.correctAnswer }}\n              </div>\n            </div>\n            \n            <div v-else-if=\"gameResult.userAnswer && !gameResult.isCorrect\" class=\"error-feedback\">\n              <div>再试试看，你可以的!</div>\n              <div class=\"user-answer\">您的答案: {{ gameResult.userAnswer }}</div>\n            </div>\n          </div>\n\n          <!-- 语音模式 -->\n          <div v-else>\n            <div class=\"grid-item\">\n              <div v-for=\"(row, rowIndex) in gameSession.currentQuestion.title\" :key=\"rowIndex\"\n                class=\"grid-row\">\n                <div v-for=\"(item, colIndex) in row\" :key=\"colIndex\" class=\"grid-button\">\n                  {{ item }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Answer area -->\n            <div class=\"answer\">\n              <div v-for=\"(answer, index) in answerArray\" :key=\"index\">\n                <button class=\"answer-button\">{{ answer }}</button>\n              </div>\n            </div>\n\n            <!-- Start Recording Button -->\n            <div v-if=\"!isRecording\">\n              <button @click=\"startRecording\" class=\"start-recording-btn\">开始录音</button>\n            </div>\n            <div v-else>\n              <p>正在录音... 10秒倒计时</p>\n            </div>\n            \n            <!-- 答案反馈区 -->\n            <div v-if=\"gameResult.isCorrect\" class=\"success-message\">\n              <div class=\"success-icon\">✓</div>\n              <div>恭喜，回答正确!</div>\n              <div class=\"correct-answer-text\">\n                正确答案: {{ gameResult.correctAnswer }}\n              </div>\n            </div>\n            \n            <div v-else-if=\"gameResult.userAnswer && !gameResult.isCorrect\" class=\"error-feedback\">\n              <div>再试试看，你可以的!</div>\n              <div class=\"user-answer\">您的答案: {{ gameResult.userAnswer }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport NavbarPage from './NavbarPage.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'GamePage',\n  data() {\n    return {\n      gameStarted: false,  // 控制游戏是否开始\n      voiceMode: false, // Controls the mode, true for voice mode, false for click mode\n      isOverlayVisible: false, // 控制蒙版显示/隐藏\n      currentIndex: null, // 记录当前点击的卡片索引\n      \n      // 游戏状态数据\n      gameSession: {\n        sessionId: null,\n        currentQuestion: null,\n        questionNumber: 0,\n        totalQuestions: 0,\n        score: 0,\n        gameCompleted: false,\n        allQuestions: [] // 存储所有题目信息\n      },\n      \n      // 保存每个关卡的游戏会话数据\n      levelGameSessions: {},\n      \n      // 页面加载状态\n      pagesLoaded: {},\n      \n      // 页面显示数据\n      questionsOfGridData: [],\n      totalOfGame: 50,\n      currentPage: 1,\n      answerArray: [], // Store the answers\n      stateOfGrid: Array(50).fill(1), // 初始状态都是未完成\n      isRecording: false,\n      \n      // 错误状态\n      errorMessage: '',\n      showError: false,\n      \n      // 游戏结果\n      gameResult: {\n        isCorrect: false,\n        correctAnswer: '',\n        message: '',\n        userAnswer: ''\n      },\n      countdown: {\n        time: 10,\n        timer: null,\n        isActive: false\n      },\n      showAnswer: false\n    }\n  },\n  components: {\n    NavbarPage\n  },\n  mounted() {\n    // 加载第一页的九宫格题目\n    this.loadQuestionsForPage(1);\n    this.pagesLoaded[1] = true;\n    console.log('初始化加载第1页数据');\n  },\n  computed: {\n    currentPageQuestions() {\n      console.log('计算当前页显示数据，当前页:', this.currentPage, '数据长度:', this.questionsOfGridData.length);\n      \n      if (this.questionsOfGridData.length === 0) {\n        console.log('当前没有题目数据，返回空数组');\n        return [];\n      }\n      \n      // 确保每页显示10个问题\n      const questionsPerPage = 10;\n      const result = [];\n      \n      for (let i = 0; i < questionsPerPage; i++) {\n        if (i < this.questionsOfGridData.length) {\n          result.push(this.questionsOfGridData[i]);\n        } else {\n          // 如果数据不足，添加默认问题\n          result.push({\n            id: `question_default_${i}`,\n            question: [\n              ['空', '空', '空'],\n              ['空', '空', '空'],\n              ['空', '空', '空']\n            ],\n            answer: '默认题目'\n          });\n        }\n      }\n      \n      console.log('当前页显示', result.length, '个问题');\n      return result;\n    }\n  },\n  methods: {\n    startGame() {\n      this.gameStarted = true;\n    },\n    backToRules() {\n      this.gameStarted = false;\n    },\n    // 加载指定页的九宫格题目\n    loadQuestionsForPage(page) {\n      console.log('加载第', page, '页的九宫格题目');\n      \n      // 如果该页已经加载过，则不重复生成\n      if (this.pagesLoaded[page]) {\n        console.log('该页已加载过，使用缓存数据');\n        return;\n      }\n      \n      // 生成模拟的九宫格数据，每页10关\n      const mockQuestions = [];\n      for (let i = 0; i < 10; i++) {\n        const index = (page - 1) * 10 + i;\n        mockQuestions.push({\n          id: `question_${index}`,\n          question: [\n            ['春', '眠', '不'],\n            ['觉', '晓', '处'],\n            ['闻', '啼', '鸟']\n          ],\n          answer: '春眠不觉晓，处处闻啼鸟'\n        });\n      }\n      \n      // 更新本页的问题数据\n      this.questionsOfGridData = mockQuestions;\n      \n      // 标记该页已加载\n      this.pagesLoaded[page] = true;\n      \n      console.log('页面数据加载完成，生成了', mockQuestions.length, '个问题');\n    },\n    \n    // 创建新游戏\n    async createGame() {\n      try {\n        // 如果已有会话ID，则重用\n        if (this.gameSession.sessionId) {\n          console.log('使用现有游戏会话:', this.gameSession.sessionId);\n          return true;\n        }\n        \n        console.log('创建新游戏会话');\n        // 调用创建游戏API\n        const response = await axios.post('/api/ninegrid/create', {}, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        const gameData = response.data;\n        console.log('创建游戏响应:', gameData);\n        \n        // 保存游戏会话信息\n        this.gameSession = {\n          sessionId: gameData.session_id,\n          currentQuestion: gameData.question,\n          questionNumber: gameData.question_number,\n          totalQuestions: gameData.total_questions,\n          score: gameData.score,\n          gameCompleted: false,\n          allQuestions: [] // 会在提交答案时获取\n        };\n        \n        return true;\n      } catch (error) {\n        console.error('创建游戏失败:', error);\n        this.showErrorMessage('创建游戏失败，请稍后再试');\n        return false;\n      }\n    },\n    \n    // 提交用户答案\n    async submitAnswer(userAnswer) {\n      try {\n        // 如果已经回答正确，不再提交\n        if (this.gameResult.isCorrect) {\n          console.log('已经回答正确，不再提交');\n          return;\n        }\n        \n        console.log('提交答案:', userAnswer, '当前关卡索引:', this.currentIndex);\n        \n        // 调用提交答案API\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: userAnswer,\n          question_index: this.currentIndex // 添加题目索引参数\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        console.log('服务器响应:', response.data);\n        \n        const result = response.data;\n        \n        // 更新游戏状态\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions;\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        \n        console.log('是否正确:', result.is_correct);\n        \n        // 明确设置游戏结果状态\n        this.gameResult.isCorrect = result.is_correct;\n        this.gameResult.correctAnswer = result.correct_answer;\n        this.gameResult.userAnswer = result.recognized_text;\n        this.gameResult.message = result.is_correct ? \n          '回答正确！' : \n          `回答错误！正确答案是：${result.correct_answer}`;\n        \n        console.log('更新后的游戏结果状态:', this.gameResult);\n        \n        // 如果答对了，清除倒计时\n        if (result.is_correct) {\n          this.clearCountdown();\n          this.stateOfGrid[this.currentIndex] = 0;\n          this.finalScore(true);\n        } else {\n          // 显示错误信息\n          //this.showErrorMessage(`答案不正确，再试试吧！`);\n        }\n        \n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[this.currentIndex] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('提交答案失败:', error);\n        this.showErrorMessage('提交答案失败，请稍后再试');\n      }\n    },\n    \n    // 显示错误消息\n    showErrorMessage(message) {\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    \n    // 显示九宫格题目\n    async showOverlay(index) {\n      console.log('打开关卡:', index, '所在页:', Math.floor(index / 10) + 1);\n      this.currentIndex = index; // Set the current question index\n      \n      // 重置游戏结果状态\n      this.gameResult.isCorrect = false;\n      this.gameResult.correctAnswer = '';\n      this.gameResult.userAnswer = '';\n      this.gameResult.message = '';\n      \n      // 检查该关卡是否已有游戏会话数据\n      if (!this.levelGameSessions[index]) {\n        // 如果游戏会话不存在，创建新的游戏会话\n        if (!this.gameSession.sessionId) {\n          // 创建新游戏\n          const success = await this.createGame();\n          if (!success) return;\n        }\n        \n        console.log('创建关卡数据，关卡索引:', index);\n        // 保存当前关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } else {\n        console.log('使用已有关卡数据，关卡索引:', index);\n        // 使用之前保存的游戏会话数据\n        this.gameSession = JSON.parse(JSON.stringify(this.levelGameSessions[index]));\n      }\n      \n      // 获取当前关卡的题目\n      try {\n        console.log('获取题目，关卡索引:', index, '会话ID:', this.gameSession.sessionId);\n        \n        // 确保游戏会话ID存在\n        if (!this.gameSession.sessionId) {\n          console.error('游戏会话ID不存在，无法获取题目');\n          this.showErrorMessage('游戏初始化失败，请刷新页面重试');\n          return;\n        }\n        \n        // 提交一个空答案来获取当前关卡的题目\n        const response = await axios.post('/api/ninegrid/submit', {\n          session_id: this.gameSession.sessionId,\n          answer: '',  // 空答案，只是为了获取题目\n          question_index: index // 明确指定要获取的题目索引\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        console.log('获取题目响应(完整数据):', JSON.stringify(response.data));\n        const result = response.data;\n        \n        // 打印关键数据\n        console.log('当前题目原始数据:', result.current_question);\n        console.log('题目标题类型:', typeof result.current_question.title);\n        if (Array.isArray(result.current_question.title)) {\n          console.log('题目是数组, 长度:', result.current_question.title.length);\n          if (result.current_question.title.length > 0) {\n            console.log('第一个元素类型:', typeof result.current_question.title[0]);\n          }\n        }\n        \n        // 确保currentQuestion存在并且有正确结构\n        if (!result.current_question) {\n          result.current_question = {\n            title: [['','',''],['','',''],['','','']],\n            answer: ''\n          };\n        }\n        \n        // 确保currentQuestion.title是二维数组格式\n        if (result.current_question && result.current_question.title) {\n          // 检查title是否已经是二维数组\n          const title = result.current_question.title;\n          \n          console.log('原始title数据:', JSON.stringify(title));\n          \n          // 确保title是二维数组\n          let formattedTitle;\n          if (Array.isArray(title) && Array.isArray(title[0])) {\n            // 已经是二维数组，不需要转换\n            formattedTitle = title;\n          } else if (Array.isArray(title)) {\n            // 一维数组，转为3x3格式\n            // 检查数组长度是否为9\n            if (title.length === 9) {\n              formattedTitle = [\n                title.slice(0, 3),\n                title.slice(3, 6),\n                title.slice(6, 9)\n              ];\n            } else {\n              // 如果长度不是9，尝试取前9个元素或填充\n              const normalizedArray = [...title];\n              while (normalizedArray.length < 9) {\n                normalizedArray.push('');\n              }\n              formattedTitle = [\n                normalizedArray.slice(0, 3),\n                normalizedArray.slice(3, 6),\n                normalizedArray.slice(6, 9)\n              ];\n            }\n          } else if (typeof title === 'string') {\n            // 字符串，转为3x3格式\n            const chars = title.split('');\n            // 确保长度为9\n            while (chars.length < 9) {\n              chars.push('');\n            }\n            formattedTitle = [\n              chars.slice(0, 3),\n              chars.slice(3, 6),\n              chars.slice(6, 9)\n            ];\n          } else {\n            // 未知格式，使用默认空二维数组\n            formattedTitle = [['','',''],['','',''],['','','']];\n            console.error('未知的title格式:', typeof title, title);\n          }\n          \n          console.log('格式化后的title:', JSON.stringify(formattedTitle));\n          \n          // 更新题目\n          result.current_question.title = formattedTitle;\n        }\n        \n        // 更新当前题目\n        this.gameSession.currentQuestion = result.current_question;\n        this.gameSession.questionNumber = result.question_number;\n        this.gameSession.score = result.score;\n        this.gameSession.allQuestions = result.all_questions || [];\n        \n        // 打印当前题目格式\n        console.log('最终题目数据:', JSON.stringify(this.gameSession.currentQuestion));\n        \n        // 更新关卡的游戏会话数据\n        this.levelGameSessions[index] = JSON.parse(JSON.stringify(this.gameSession));\n      } catch (error) {\n        console.error('获取题目失败:', error);\n        this.showErrorMessage('获取题目失败，请稍后再试');\n        return;\n      }\n      \n      // 清空答案数组\n      this.answerArray = [];\n      \n      // 在获取题目后启动倒计时\n      this.startCountdown();\n      \n      // 显示九宫格\n      this.isOverlayVisible = true;\n      \n      if (this.voiceMode) {\n        this.startRecording();\n      }\n    },\n    \n    hideOverlay() {\n      this.isOverlayVisible = false;\n      this.answerArray = [];\n      this.clearCountdown();  // 清理倒计时\n    },\n    \n    // 点击模式：添加字符到答案\n    addToAnswer(item) {\n      // 如果已经回答正确，不再添加新字符\n      if (this.gameResult.isCorrect) {\n        return;\n      }\n      \n      this.answerArray.push(item); // 将用户点击的字符添加到答案数组\n      \n      // 在每次添加字符后检查答案\n      if (this.gameSession && this.gameSession.currentQuestion) {\n        // 组合用户当前输入的答案\n        const userAnswer = this.answerArray.join('');\n        \n        // 每输入一个字符就尝试检查答案，不管长度\n        this.checkAnswerMatching(userAnswer);\n      }\n    },\n    \n    // 添加新方法，不调用API而是在前端检查匹配\n    checkAnswerMatching(userAnswer) {\n      if (!this.gameSession || !this.gameSession.currentQuestion) return;\n      \n      console.log('检查答案:', userAnswer);\n      console.log('答案长度:', userAnswer.length);\n      \n      // 如果输入的字符足够多（至少5个字符），尝试提交到服务器\n      if (userAnswer.length >= 5) {\n        console.log('提交答案到服务器');\n        this.submitAnswer(userAnswer);\n      }\n    },\n    \n    // 点击模式：从答案中移除字符\n    removeFromAnswer(item) {\n      const index = this.answerArray.indexOf(item);\n      if (index > -1) {\n        this.answerArray.splice(index, 1); // 从答案中移除选中的按钮\n      }\n    },\n    \n    // 检查答案并提交\n    checkAndSubmitAnswer() {\n      if (this.answerArray.length === 0) {\n        this.showErrorMessage('请输入答案');\n        return;\n      }\n      \n      // 组合用户输入的答案\n      const userAnswer = this.answerArray.join('');\n      \n      // 提交答案\n      this.submitAnswer(userAnswer);\n    },\n    \n    // 显示游戏结果\n    finalScore(isWin) {\n      console.log('调用finalScore, isWin:', isWin);\n      \n      if (isWin) {\n        // 确保游戏结果状态被设置为正确\n        this.gameResult.isCorrect = true;\n        console.log('finalScore设置游戏状态为正确:', this.gameResult);\n        \n        // 直接向界面显示消息\n        //this.showSuccessMessage('恭喜，回答正确!');\n      } else {\n        // 不显示错误信息\n        return;\n      }\n      // 不关闭弹窗，让用户自己关闭\n    },\n    \n    // 设置游戏卡片的样式\n    getStyle(index) {\n      const state = this.stateOfGrid[index];\n      return {\n        backgroundImage: state === 1\n          ? 'url(/image/before.png)'\n          : 'url(/image/win.png)',\n        width: '30px',\n        height: '30px',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        padding: '5px'\n      };\n    },\n    \n    // 更新页面\n    handlePageChange(newPage) {\n      console.log('切换到第', newPage, '页');\n      this.currentPage = newPage;  // 更新当前页\n      \n      // 确保当前页有数据\n      this.loadQuestionsForPage(newPage);\n      \n      // 如果缓存中没有该页数据，重新生成\n      if (!this.questionsOfGridData || this.questionsOfGridData.length === 0) {\n        console.log('当前页数据为空，重新生成数据');\n        // 生成模拟的九宫格数据，每页10关\n        const mockQuestions = [];\n        for (let i = 0; i < 10; i++) {\n          const index = (newPage - 1) * 10 + i;\n          mockQuestions.push({\n            id: `question_${index}`,\n            question: [\n              ['春', '眠', '不'],\n              ['觉', '晓', '处'],\n              ['闻', '啼', '鸟']\n            ],\n            answer: '春眠不觉晓，处处闻啼鸟'\n          });\n        }\n        \n        // 更新本页的问题数据\n        this.questionsOfGridData = mockQuestions;\n        \n        console.log('页面切换：已重新生成数据，长度为', mockQuestions.length);\n      }\n    },\n    \n    // 切换游戏模式\n    toggleMode() {\n      this.voiceMode = !this.voiceMode;\n    },\n    \n    // 录音功能\n    startRecording() {\n      this.isRecording = true;  // Set recording status to true\n      this.timer = setTimeout(() => {\n        this.stopRecording();  // Automatically stop recording after 10 seconds\n      }, 10000);  // 10 seconds\n\n      // Use axios to send POST request\n      axios.post('/api/audio/record', { duration: 10 })\n        .then(response => {\n          if (response.data.file_name) {\n            console.log(\"Recording completed. File saved as: \" + response.data.file_name);\n            // Perform further actions with the recorded file name\n            this.startRecognition(response.data.file_name);\n          } else {\n            console.log(\"Error recording audio:\", response.data);\n          }\n        })\n        .catch(error => {\n          console.error(\"Error starting recording:\", error);\n        });\n    },\n\n    stopRecording() {\n      this.isRecording = false;  // Stop recording\n      console.log('Recording stopped automatically after 10 seconds.');\n    },\n\n    startRecognition(fileName) {\n      fetch('/api/audio/recognize', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ file_name: fileName })\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (data.result) {\n            console.log(\"Recognition result:\", data.result);\n            // 去掉标点符号并更新 data.result\n            const cleanResult = data.result.replace(/[，。？！；：\"\"''【】()（）《》、，。、。]/g, '');\n\n            // 将去掉标点后的每个字符添加到 answerArray 中\n            for (const char of cleanResult) {\n              this.answerArray.push(char);\n            }\n\n            // 提交语音识别的答案\n            this.submitAnswer(cleanResult);\n\n          } else {\n            console.log(\"Error during recognition:\", data);\n          }\n        })\n        .catch(error => {\n          console.error(\"Error starting recognition:\", error);\n        });\n    },\n\n    // 添加一个显示成功消息的方法\n    showSuccessMessage(message) {\n      // 使用轻量级的提示，不影响游戏界面\n      this.errorMessage = message;\n      this.showError = true;\n      setTimeout(() => {\n        this.showError = false;\n      }, 3000);\n    },\n    \n    // 开始倒计时\n    startCountdown() {\n      this.countdown.time = 10;\n      this.countdown.isActive = true;\n      this.showAnswer = false;\n      \n      // 清除可能存在的旧定时器\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n      }\n      \n      this.countdown.timer = setInterval(() => {\n        if (this.countdown.time > 0) {\n          this.countdown.time--;\n        } else {\n          this.timeUp();\n        }\n      }, 1000);\n    },\n    \n    // 时间到处理\n    timeUp() {\n      clearInterval(this.countdown.timer);\n      this.countdown.isActive = false;\n      this.showAnswer = true;\n      \n      // 如果还没答对，显示正确答案\n      if (!this.gameResult.isCorrect) {\n        this.gameResult.correctAnswer = this.gameSession.currentQuestion.answer;\n      }\n    },\n    \n    // 清理倒计时\n    clearCountdown() {\n      if (this.countdown.timer) {\n        clearInterval(this.countdown.timer);\n        this.countdown.timer = null;\n      }\n      this.countdown.isActive = false;\n      this.showAnswer = false;\n    }\n  },\n  watch: {\n    currentPage(newPage, oldPage) {\n      console.log('页面从', oldPage, '变为', newPage);\n      // 确保新页面数据加载\n      this.loadQuestionsForPage(newPage);\n    }\n  },\n  beforeUnmount() {\n    if (this.countdown.timer) {\n      clearInterval(this.countdown.timer);\n      this.countdown.timer = null;\n    }\n    this.countdown.isActive = false;\n    this.showAnswer = false;\n  }\n}\n</script>\n\n<style scoped>\n.body {\n  font-family: \"宋体\", sans-serif;\n  background-color: #f8f4e9;\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-image: url('../assets/image/he.gif');\n  background-size: cover;\n  background-position: center;\n  color: #333;\n  background-repeat: repeat;\n}\n\n.rules-container {\n  min-height: 90vh;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n  padding-top: 40px;\n}\n\n.background-container {\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.93) 100%);\n  background-image: \n    linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.93) 100%),\n    url(\"data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23614124' fill-opacity='0.08' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\");\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 60vw;\n  min-height: 60vh;\n  position: relative;\n  border-radius: 20px;\n  box-shadow: 0 4px 25px rgba(139, 69, 19, 0.12);\n  border: 2px solid rgba(139, 69, 19, 0.25);\n  margin: 0 auto;\n}\n\n.background-container p {\n  margin: 15px auto;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n  text-align: center;\n}\n\n.title {\n  font-size: 2em !important;\n  margin-bottom: 15px !important;\n  font-weight: bold;\n}\n\n.subtitle {\n  font-size: 1.2em !important;\n  margin-top: 20px !important;\n}\n\n.game-rule-text {\n  width: 80%;\n  margin: 20px auto;\n  text-align: left;\n  white-space: normal;\n  word-wrap: break-word;\n  word-break: break-all;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.1em;\n  line-height: 1.8;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.8) 0%, rgba(245, 236, 220, 0.85) 100%);\n  padding: 20px 30px;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(139, 69, 19, 0.1);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n}\n\n.game-content {\n  padding: 20px;\n  min-height: 100vh;\n  width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.game-card-container {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 20px;\n  width: 90%;\n  margin: 2vh auto;\n  padding: 15px;\n}\n\n.game-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  box-sizing: border-box;\n  background-color: transparent;\n  border-radius: 10px;\n  padding: 15px;\n  box-shadow: none;\n  transition: transform 0.3s ease;\n  position: relative;\n}\n\n.level {\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.85) 0%, rgba(248, 244, 233, 0.95) 100%);\n  padding: 8px 20px;\n  border-radius: 15px;\n  margin-bottom: 15px;\n  position: relative;\n  backdrop-filter: blur(3px);\n  border: 1px solid rgba(139, 69, 19, 0.1);\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  width: fit-content;\n  margin: 0 auto 15px;\n}\n\n.page {\n  margin: 2vh auto;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.error-message {\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 10px 15px;\n  border-radius: 5px;\n  margin: 10px auto;\n  max-width: 80%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: fit-content;\n}\n\n.success-message, .error-feedback {\n  margin: 10px auto;\n  padding: 10px;\n  width: 85%;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border-radius: 8px;\n  color: #8B4513;\n  text-align: center;\n  font-weight: bold;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);\n  animation: fadeIn 0.5s;\n  border: 1px solid rgba(139, 69, 19, 0.2);\n}\n\n.correct-answer-text {\n  margin-top: 10px;\n  font-size: 18px;\n  color: #8B4513;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  text-align: center;\n  width: 100%;\n}\n\n.user-answer {\n  margin-top: 8px;\n  font-size: 16px;\n  color: #8B4513;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  text-align: center;\n  width: 100%;\n}\n\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from, .fade-leave-to {\n  opacity: 0;\n}\n\n.start-game-btn {\n  margin: 30px auto 0;\n  padding: 12px 40px;\n  font-size: 1.2em;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n.back-to-rules-btn {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 8px 20px;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n  border: 1px solid rgba(139, 69, 19, 0.2);\n  border-radius: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  z-index: 100;\n}\n\n.mode-selection {\n    margin: 20px auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 15px;\n    font-family: \"楷体\", \"STKaiti\", serif;\n    font-size: 1.2em;\n}\n\n.mode-selection span {\n    transition: all 0.3s ease;\n    color: #8B4513;\n    opacity: 0.6;\n    position: relative;\n    cursor: pointer;\n    text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n}\n\n.mode-selection span.active {\n    color: #8B4513;\n    opacity: 1;\n    font-weight: bold;\n}\n\n.mode-selection span.active::after {\n    content: '';\n    position: absolute;\n    bottom: -3px;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, #8B4513, transparent);\n    animation: fadeIn 0.3s ease;\n}\n\n.modeSelect {\n    width: 20px;\n    height: 50px;\n    background-image: url('../assets/image/modeButton.png');\n    background-size: cover;\n    background-repeat: no-repeat;\n    cursor: pointer;\n    border: none;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n    background-color: transparent;\n    opacity: 0.8;\n}\n\n.modeSelect:hover {\n    opacity: 1;\n}\n\n.modeSelect.active {\n    transform: rotateY(180deg);\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  z-index: 10;\n  color: #333;\n  padding: 5px 10px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n}\n\n.overlay {\n  position: fixed;\n  /* 设置为 fixed 定位，使蒙版固定在页面上 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  /* 半透明黑色背景，遮挡周围区域 */\n  display: flex;\n  /* 使用 flexbox 来居中内容 */\n  justify-content: center;\n  /* 水平居中 */\n  align-items: center;\n  /* 垂直居中 */\n  z-index: 1000;\n  /* 确保蒙版显示在最上层 */\n  flex-direction: column;\n  background-size: cover;\n  /* 确保背景图片填满容器 */\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n}\n\n.overlay-content {\n  width: 500px;\n  height: 500px;\n  padding: 20px;\n  box-sizing: border-box;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.97) 0%, rgba(245, 236, 220, 0.95) 100%);\n  background-image: \n    linear-gradient(135deg, rgba(238, 226, 203, 0.97) 0%, rgba(245, 236, 220, 0.95) 100%),\n    url(\"data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23614124' fill-opacity='0.08' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\");\n  border: 2px solid rgba(139, 69, 19, 0.25);\n  border-radius: 15px;\n  opacity: 1;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(139, 69, 19, 0.15);\n}\n\n.boardOfNine {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 20px;\n    box-sizing: border-box;\n}\n\n.grid-item {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 20px auto 10px;\n    width: 85%;\n}\n\n.answer {\n    margin: 10px auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 5px;\n    min-height: 40px;\n    padding: 10px;\n    background: linear-gradient(135deg, rgba(248, 244, 233, 0.4) 0%, rgba(248, 244, 233, 0.6) 100%);\n    border: 1px solid rgba(139, 69, 19, 0.15);\n    border-radius: 8px;\n    width: 85%;\n    backdrop-filter: blur(3px);\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);\n}\n\n.success-icon {\n    font-size: 32px;\n    margin-bottom: 10px;\n    color: #8B4513;\n}\n\n.start-recording-btn {\n    margin: 10px auto;\n    display: block;\n    background-color: #2196F3;\n    color: white;\n    padding: 10px 20px;\n    font-size: 16px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    font-weight: bold;\n    transition: background-color 0.3s;\n}\n\n.grid-row {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    margin-bottom: 5px;\n}\n\n.grid-button {\n  width: 70px;\n  height: 70px;\n  font-size: 24px;\n  font-weight: bold;\n  cursor: pointer;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.9) 100%);\n  border: 2px solid rgba(139, 69, 19, 0.4);\n  border-radius: 8px;\n  margin: 0 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.15);\n  transition: all 0.3s ease;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.3);\n}\n\n.grid-button:hover {\n  background: linear-gradient(135deg, rgba(245, 236, 220, 0.98) 0%, rgba(238, 226, 203, 0.93) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(139, 69, 19, 0.2);\n  border-color: rgba(139, 69, 19, 0.6);\n}\n\n.answer-button {\n  width: 40px;\n  height: 40px;\n  font-size: 16px;\n  cursor: pointer;\n  background: linear-gradient(135deg, rgba(248, 244, 233, 0.8) 0%, rgba(248, 244, 233, 0.9) 100%);\n  border: 2px solid rgba(139, 69, 19, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 2px;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n  color: #614124;\n  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.5);\n}\n\n.answer-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.1);\n  border-color: rgba(139, 69, 19, 0.5);\n}\n\n/* 覆盖分页的按钮背景色 */\n.el-pagination .el-pager li {\n  background-image: linear-gradient(to top, #fddb92 0%, #d1fdff 100%);\n  border-radius: 5px;\n  /* 设置圆角 */\n}\n\n.el-pagination .el-icon-arrow-left,\n.el-pagination .el-icon-arrow-right {\n  font-size: 20px;\n  /* 改变箭头图标的大小 */\n  background-image: linear-gradient(to top, #fddb92 0%, #d1fdff 100%);\n}\n\n.game-info {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  background-color: rgba(255, 255, 255, 0.7);\n  border-radius: 5px;\n  font-weight: bold;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.countdown-display {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.9) 100%);\n  padding: 8px 15px;\n  border-radius: 8px;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  color: #614124;\n  font-size: 1.1em;\n  border: 1px solid rgba(139, 69, 19, 0.3);\n  box-shadow: 0 2px 8px rgba(139, 69, 19, 0.1);\n}\n\n.timeout-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: linear-gradient(135deg, rgba(238, 226, 203, 0.98) 0%, rgba(245, 236, 220, 0.95) 100%);\n  padding: 20px 30px;\n  border-radius: 12px;\n  text-align: center;\n  border: 2px solid rgba(139, 69, 19, 0.3);\n  box-shadow: 0 4px 15px rgba(139, 69, 19, 0.15);\n  z-index: 1000;\n}\n\n.timeout-message div {\n  margin: 10px 0;\n  color: #614124;\n  font-family: \"楷体\", \"STKaiti\", serif;\n  font-size: 1.2em;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}