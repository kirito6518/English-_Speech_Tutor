{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, withCtx as _withCtx, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"body\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_3 = {\n  class: \"poem-card-container\"\n};\nconst _hoisted_4 = [\"src\", \"onClick\"];\nconst _hoisted_5 = {\n  class: \"stars\"\n};\nconst _hoisted_6 = {\n  class: \"page-poem\"\n};\nconst _hoisted_7 = {\n  class: \"overlay-poem\"\n};\nconst _hoisted_8 = {\n  class: \"content-of-poem-overlay\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"poem-container\"\n};\nconst _hoisted_10 = {\n  class: \"poem-content\"\n};\nconst _hoisted_11 = {\n  class: \"title\"\n};\nconst _hoisted_12 = {\n  class: \"author\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"poem-mask\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"countdown-display\"\n};\nconst _hoisted_15 = {\n  key: 2,\n  class: \"timeout-message\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"recitation-area\"\n};\nconst _hoisted_17 = {\n  key: 0,\n  class: \"recitation-result\"\n};\nconst _hoisted_18 = {\n  class: \"result-icon\"\n};\nconst _hoisted_19 = {\n  class: \"accuracy\"\n};\nconst _hoisted_20 = {\n  class: \"score-display\"\n};\nconst _hoisted_21 = {\n  class: \"recognized-text\"\n};\nconst _hoisted_22 = {\n  class: \"correct-text\"\n};\nconst _hoisted_23 = {\n  key: 1\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"recording-status\"\n};\nconst _hoisted_25 = {\n  key: 1,\n  class: \"recitation-prompt\"\n};\nconst _hoisted_26 = {\n  class: \"recitation-buttons\"\n};\nconst _hoisted_27 = {\n  key: 0,\n  class: \"text-input-area\"\n};\nconst _hoisted_28 = {\n  key: 1,\n  class: \"recite-button-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavbarPage = _resolveComponent(\"NavbarPage\");\n  const _component_StarFilled = _resolveComponent(\"StarFilled\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_pagination = _resolveComponent(\"el-pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavbarPage), _createCommentVNode(\" 错误提示 \"), $data.showError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Game Area \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" 使用 v-for 遍历当前页的诗词 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.displayedPoems, (poem, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"poem-card\"\n    }, [_createElementVNode(\"img\", {\n      src: require(`@/assets/image/recite${index + 1 + ($data.currentPage - 1) * 8}.jpg`),\n      style: {\n        \"border-radius\": \"20px\"\n      },\n      width: \"200vw\",\n      class: \"shadow-image\",\n      onClick: $event => $options.showOverlay(index + ($data.currentPage - 1) * 8)\n    }, null, 8 /* PROPS */, _hoisted_4), _createCommentVNode(\" 星星图标，基于评分动态渲染 \"), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(5, starIndex => {\n      return _createVNode(_component_el_icon, {\n        key: starIndex\n      }, {\n        default: _withCtx(() => [_createVNode(_component_StarFilled, {\n          style: _normalizeStyle($options.getPoemScore(index + ($data.currentPage - 1) * 8) >= starIndex ? {\n            color: 'gold'\n          } : {\n            color: 'white'\n          })\n        }, null, 8 /* PROPS */, [\"style\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 64 /* STABLE_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_pagination, {\n    background: \"\",\n    layout: \"prev, pager, next\",\n    total: $data.totalPoems,\n    class: \"mt-4\",\n    \"page-size\": 8,\n    \"current-page\": $data.currentPage,\n    onCurrentChange: $options.handlePageChange\n  }, null, 8 /* PROPS */, [\"total\", \"current-page\", \"onCurrentChange\"])]), _createCommentVNode(\" Overlay \"), $data.isOverlayVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"overlay\",\n    onClick: _cache[7] || (_cache[7] = _withModifiers((...args) => $options.hideOverlay && $options.hideOverlay(...args), [\"self\"]))\n  }, [_createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" Poem \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    class: \"close-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.hideOverlay && $options.hideOverlay(...args))\n  }, \"×\"), _createCommentVNode(\" Display poem \"), $options.currentPoem ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, _toDisplayString($options.currentPoem.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, _toDisplayString($options.currentPoem.author), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentPoem.content, (line, lineIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: lineIndex,\n      class: \"content\"\n    }, [_createElementVNode(\"div\", null, _toDisplayString(line), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.isRecitingMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13)) : _createCommentVNode(\"v-if\", true), $data.countdown.isActive ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, \" 剩余时间：\" + _toDisplayString(Math.floor($data.countdown.time / 60)) + \"分\" + _toDisplayString($data.countdown.time % 60) + \"秒 \", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.showTimeoutMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _cache[8] || (_cache[8] = [_createElementVNode(\"div\", null, \"时间到！\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 背诵区 \"), $data.isRecitingMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [$data.recitationResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"div\", {\n    class: _normalizeClass(['result-status', $data.recitationResult.score >= 4 ? 'success' : 'warning'])\n  }, [_createElementVNode(\"div\", _hoisted_18, _toDisplayString($data.recitationResult.score >= 4 ? '✓' : '!'), 1 /* TEXT */), _createElementVNode(\"h3\", null, _toDisplayString($data.recitationResult.feedback), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_19, \"准确率: \" + _toDisplayString($data.recitationResult.accuracy) + \"%\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_20, \"得分: \" + _toDisplayString($data.recitationResult.score) + \"/5\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_21, \"识别文本: \" + _toDisplayString($data.recitationResult.recitation_text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_22, \"正确文本: \" + _toDisplayString($data.recitationResult.correct_text), 1 /* TEXT */)], 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: \"btn-grad\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.closeRecitation && $options.closeRecitation(...args))\n  }, \"返回\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [$data.isRecording ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    class: \"pulse-icon\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"正在录音... \" + _toDisplayString($data.recordingTimeLeft) + \"秒后自动停止\", 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_cache[10] || (_cache[10] = _createElementVNode(\"p\", null, \"请朗读整首诗词，包括标题和作者\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"button\", {\n    class: \"btn-grad\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.startVoiceRecitation && $options.startVoiceRecitation(...args))\n  }, \"开始语音背诵\"), _createElementVNode(\"button\", {\n    class: \"btn-grad\",\n    onClick: _cache[3] || (_cache[3] = $event => $data.showTextInput = !$data.showTextInput)\n  }, _toDisplayString($data.showTextInput ? '取消文本输入' : '文本输入'), 1 /* TEXT */)]), $data.showTextInput ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.textRecitation = $event),\n    placeholder: \"请输入背诵内容...\",\n    rows: \"5\",\n    class: \"recitation-textarea\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.textRecitation]]), _createElementVNode(\"button\", {\n    class: \"btn-grad submit-text\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.submitTextRecitation && $options.submitTextRecitation(...args))\n  }, \"提交\")])) : _createCommentVNode(\"v-if\", true)]))]))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n    class: \"btn-grad\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.beginRecite && $options.beginRecite(...args))\n  }, \"开始背诵\")]))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_NavbarPage","_createCommentVNode","$data","showError","_hoisted_2","_toDisplayString","errorMessage","_createElementVNode","_hoisted_3","_Fragment","_renderList","$options","displayedPoems","poem","index","src","require","currentPage","style","width","onClick","$event","showOverlay","_hoisted_4","_hoisted_5","starIndex","_component_el_icon","default","_withCtx","_component_StarFilled","_normalizeStyle","getPoemScore","color","_","_hoisted_6","_component_el_pagination","background","layout","total","totalPoems","onCurrentChange","handlePageChange","isOverlayVisible","_cache","_withModifiers","args","hideOverlay","_hoisted_7","_hoisted_8","currentPoem","_hoisted_9","_hoisted_10","_hoisted_11","title","_hoisted_12","author","content","line","lineIndex","isRecitingMode","_hoisted_13","countdown","isActive","_hoisted_14","Math","floor","time","showTimeoutMessage","_hoisted_15","_hoisted_16","recitationResult","_hoisted_17","_normalizeClass","score","_hoisted_18","feedback","_hoisted_19","accuracy","_hoisted_20","_hoisted_21","recitation_text","_hoisted_22","correct_text","closeRecitation","_hoisted_23","isRecording","_hoisted_24","recordingTimeLeft","_hoisted_25","_hoisted_26","startVoiceRecitation","showTextInput","_hoisted_27","textRecitation","placeholder","rows","submitTextRecitation","_hoisted_28","beginRecite"],"sources":["E:\\大二下\\用户交互技术\\new_copy (2)\\frontend\\src\\components\\ReciteMode.vue"],"sourcesContent":["<template>\n    <div class=\"body\">\n        <NavbarPage />\n\n        <!-- 错误提示 -->\n        <div v-if=\"showError\" class=\"error-message\">{{ errorMessage }}</div>\n\n        <!-- Game Area -->\n        <div class=\"poem-card-container\">\n            <!-- 使用 v-for 遍历当前页的诗词 -->\n            <div v-for=\"(poem, index) in displayedPoems\" :key=\"index\" class=\"poem-card\">\n                <img :src=\"require(`@/assets/image/recite${index + 1 + (currentPage - 1) * 8}.jpg`)\" style=\"border-radius: 20px;\" width=\"200vw\"\n                    class=\"shadow-image\" @click=\"showOverlay(index + (currentPage - 1) * 8)\">\n                <!-- 星星图标，基于评分动态渲染 -->\n                <div class=\"stars\">\n                    <el-icon v-for=\"starIndex in 5\" :key=\"starIndex\">\n                        <StarFilled :style=\"getPoemScore(index + (currentPage - 1) * 8) >= starIndex ? { color: 'gold' } : { color: 'white' }\" />\n                    </el-icon>\n                </div>\n            </div>\n        </div>\n        <div class=\"page-poem\">\n            <el-pagination background layout=\"prev, pager, next\" :total=\"totalPoems\" class=\"mt-4\" :page-size=\"8\"\n                :current-page=\"currentPage\" @current-change=\"handlePageChange\"></el-pagination>\n        </div>\n\n        <!-- Overlay -->\n        <div v-if=\"isOverlayVisible\" class=\"overlay\" @click.self=\"hideOverlay\">\n            <div class=\"overlay-poem\">\n                <!-- Poem -->\n                <div class=\"content-of-poem-overlay\">\n                    <button class=\"close-button\" @click=\"hideOverlay\">&times;</button>\n\n                    <!-- Display poem -->\n                    <div v-if=\"currentPoem\" class=\"poem-container\">\n                        <div class=\"poem-content\">\n                            <div class=\"title\">\n                                {{ currentPoem.title }}\n                            </div>\n                            <div class=\"author\">\n                                {{ currentPoem.author }}\n                            </div>\n                            <div v-for=\"(line, lineIndex) in currentPoem.content\" :key=\"lineIndex\" class=\"content\">\n                                <div>{{ line }}</div>\n                            </div>\n                        </div>\n                        <div v-if=\"isRecitingMode\" class=\"poem-mask\"></div>\n                        <div class=\"countdown-display\" v-if=\"countdown.isActive\">\n                            剩余时间：{{ Math.floor(countdown.time / 60) }}分{{ countdown.time % 60 }}秒\n                        </div>\n                        <div v-if=\"showTimeoutMessage\" class=\"timeout-message\">\n                            <div>时间到！</div>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- 背诵区 -->\n                <div v-if=\"isRecitingMode\" class=\"recitation-area\">\n                    <div v-if=\"recitationResult\" class=\"recitation-result\">\n                        <div :class=\"['result-status', recitationResult.score >= 4 ? 'success' : 'warning']\">\n                            <div class=\"result-icon\">{{ recitationResult.score >= 4 ? '✓' : '!' }}</div>\n                            <h3>{{ recitationResult.feedback }}</h3>\n                            <div class=\"accuracy\">准确率: {{ recitationResult.accuracy }}%</div>\n                            <div class=\"score-display\">得分: {{ recitationResult.score }}/5</div>\n                            <div class=\"recognized-text\">识别文本: {{ recitationResult.recitation_text }}</div>\n                            <div class=\"correct-text\">正确文本: {{ recitationResult.correct_text }}</div>\n                        </div>\n                        <button class=\"btn-grad\" @click=\"closeRecitation\">返回</button>\n                    </div>\n                    <div v-else>\n                        <div v-if=\"isRecording\" class=\"recording-status\">\n                            <div class=\"pulse-icon\"></div>\n                            <p>正在录音... {{ recordingTimeLeft }}秒后自动停止</p>\n                        </div>\n                        <div v-else class=\"recitation-prompt\">\n                            <p>请朗读整首诗词，包括标题和作者</p>\n                            <div class=\"recitation-buttons\">\n                                <button class=\"btn-grad\" @click=\"startVoiceRecitation\">开始语音背诵</button>\n                                <button class=\"btn-grad\" @click=\"showTextInput = !showTextInput\">\n                                    {{ showTextInput ? '取消文本输入' : '文本输入' }}\n                                </button>\n                            </div>\n                            <div v-if=\"showTextInput\" class=\"text-input-area\">\n                                <textarea \n                                    v-model=\"textRecitation\" \n                                    placeholder=\"请输入背诵内容...\" \n                                    rows=\"5\" \n                                    class=\"recitation-textarea\"\n                                ></textarea>\n                                <button class=\"btn-grad submit-text\" @click=\"submitTextRecitation\">提交</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div v-else class=\"recite-button-container\">\n                    <button class=\"btn-grad\" @click=\"beginRecite\">开始背诵</button>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n</template>\n\n<script>\nimport NavbarPage from './NavbarPage.vue';\nimport { ElIcon } from 'element-plus';\nimport { StarFilled } from '@element-plus/icons-vue';  // 引入 Star 图标\nimport axios from 'axios';\n\nexport default {\n    name: 'RecitePage',\n    data() {\n        return {\n            // 会话数据\n            sessionId: null,\n            allPoems: [], // 从后端获取的所有诗词\n            \n            // 页面状态\n            currentPage: 1,\n            totalPoems: 50,\n            poemsPerPage: 8,\n            isOverlayVisible: false,\n            currentPoemIndex: null,\n            isRecitingMode: false,\n            isRecording: false,\n            recordingTimeLeft: 0,\n            recordingTimer: null,\n            recitationResult: null,\n            textRecitation: '',\n            showTextInput: false,\n\n            // 错误处理\n            showError: false,\n            errorMessage: '',\n\n            // 倒计时相关数据\n            countdown: {\n                time: 60,\n                timer: null,\n                isActive: false\n            },\n            showTimeoutMessage: false,\n        }\n    },\n    components: {\n        NavbarPage,\n        ElIcon,\n        StarFilled\n    },\n    computed: {\n        // 当前页显示的诗词\n        displayedPoems() {\n            if (!this.allPoems || this.allPoems.length === 0) {\n                console.log('displayedPoems: 诗词数据尚未加载');\n                return Array(this.poemsPerPage).fill({\n                    title: '加载中...',\n                    author: '',\n                    content: [''],\n                    is_completed: false,\n                    score: 0\n                });\n            }\n            \n            const start = (this.currentPage - 1) * this.poemsPerPage;\n            const end = Math.min(start + this.poemsPerPage, this.allPoems.length);\n            console.log(`displayedPoems: 显示诗词范围 ${start} - ${end}, 总长度: ${this.allPoems.length}`);\n            return this.allPoems.slice(start, end);\n        },\n        // 当前选中的诗词\n        currentPoem() {\n            if (this.currentPoemIndex === null || !this.allPoems || this.allPoems.length === 0) {\n                return {\n                    title: '加载中...',\n                    author: '',\n                    content: [''],\n                    is_completed: false,\n                    score: 0\n                };\n            }\n            \n            if (this.currentPoemIndex >= this.allPoems.length) {\n                console.error('访问了不存在的诗词索引:', this.currentPoemIndex);\n                return {\n                    title: '数据错误',\n                    author: '',\n                    content: ['无法加载该诗词'],\n                    is_completed: false,\n                    score: 0\n                };\n            }\n            \n            return this.allPoems[this.currentPoemIndex] || {\n                title: '加载中...',\n                author: '',\n                content: [''],\n                is_completed: false,\n                score: 0\n            };\n        }\n    },\n    mounted() {\n        // 初始化时创建背诵会话\n        this.createRecitationSession();\n    },\n    methods: {\n        // 创建背诵会话\n        async createRecitationSession() {\n            try {\n                console.log('开始创建背诵会话...');\n                // 初始化诗词数组，即使API未返回也有内容显示\n                this.allPoems = Array(this.totalPoems).fill().map((_, index) => ({\n                    title: `诗词 ${index + 1}`,\n                    author: '加载中...',\n                    content: ['点击加载详情'],\n                    is_completed: false,\n                    score: 0\n                }));\n\n                const response = await axios.post('/api/recitation/create');\n                console.log('创建背诵会话响应:', response.data);\n                \n                this.sessionId = response.data.session_id;\n                \n                // 初始化诗词数据\n                const firstPoem = response.data.poem;\n                this.totalPoems = response.data.total_poems;\n                \n                // 固定的6首经典诗词\n                const fixedPoems = [\n                    { \n                        title: '江南', \n                        author: '《汉乐府》', \n                        content: ['江南可采莲，莲叶何田田。鱼戏莲叶间。', '鱼戏莲叶东，鱼戏莲叶西，鱼戏莲叶南，鱼戏莲叶北。'],\n                        is_completed: false,\n                        score: 0 \n                    },\n                    { \n                        title: '咏鹅', \n                        author: '（唐）骆宾王', \n                        content: ['鹅鹅鹅，曲项向天歌。', '白毛浮绿水，红掌拨清波。'],\n                        is_completed: false,\n                        score: 0 \n                    },\n                    { \n                        title: '画', \n                        author: '（唐）王维', \n                        content: ['远看山有色，近听水无声。', '春去花还在，人来鸟不惊。'],\n                        is_completed: false,\n                        score: 0 \n                    },\n                    { \n                        title: '悯农', \n                        author: '（唐）李绅', \n                        content: ['锄禾日当午，汗滴禾下土。', '谁知盘中餐，粒粒皆辛苦。'],\n                        is_completed: false,\n                        score: 0 \n                    },\n                    { \n                        title: '古朗月行', \n                        author: '（唐）李白', \n                        content: ['小时不识月，呼作白玉盘。', '又疑瑶台镜，飞在青云端。'],\n                        is_completed: false,\n                        score: 0 \n                    },\n                    { \n                        title: '风', \n                        author: '（唐）李峤', \n                        content: ['解落三秋叶，能开二月花。', '过江千尺浪，入竹万竿斜。'],\n                        is_completed: false,\n                        score: 0 \n                    }\n                ];\n                \n                // 创建新的诗词列表，前6首是固定诗词\n                const newAllPoems = [...fixedPoems];\n                \n                // 从API获取的诗词数据\n                const apiPoems = response.data.poems || [];\n                \n                // 如果后端返回了诗词列表，使用后端返回的诗词\n                if (apiPoems.length > 0) {\n                    // 将API返回的诗词添加到固定诗词之后\n                    apiPoems.forEach(poem => {\n                        newAllPoems.push({\n                            poem_id: poem.poem_id,\n                            title: poem.title,\n                            author: poem.author,\n                            poem_name: poem.poem_name,\n                            content: poem.content,\n                            is_completed: false,\n                            score: 0\n                        });\n                    });\n                } \n                // 如果只返回了第一首诗\n                else if (firstPoem) {\n                    newAllPoems.push({\n                        poem_id: firstPoem.poem_id,\n                        title: firstPoem.title,\n                        author: firstPoem.author,\n                        poem_name: firstPoem.poem_name,\n                        content: firstPoem.content,\n                        is_completed: false,\n                        score: 0\n                    });\n                }\n                \n                // 如果诗词总数不足，添加占位诗词\n                while (newAllPoems.length < this.totalPoems) {\n                    newAllPoems.push({\n                        title: `诗词 ${newAllPoems.length + 1}`,\n                        author: '加载中...',\n                        content: ['点击加载详情'],\n                        is_completed: false,\n                        score: 0\n                    });\n                }\n                \n                // 确保总数量正确\n                if (newAllPoems.length > this.totalPoems) {\n                    this.allPoems = newAllPoems.slice(0, this.totalPoems);\n                } else {\n                    this.allPoems = newAllPoems;\n                }\n                \n                console.log(`背诵会话创建完成，诗词数量: ${this.allPoems.length}`);\n            } catch (error) {\n                console.error('创建背诵会话失败:', error);\n                this.showErrorMessage('创建背诵会话失败，请稍后再试');\n            }\n        },\n        \n        // 显示诗词详情\n        async showOverlay(index) {\n            console.log('点击的索引:', index, '当前allPoems长度:', this.allPoems ? this.allPoems.length : 0);\n            \n            // 确保allPoems已经初始化\n            if (!this.allPoems) {\n                console.error('诗词数组未初始化');\n                this.showErrorMessage('诗词数据正在加载中，请稍后再试');\n                return;\n            }\n\n            // 检查索引是否有效\n            if (index < 0 || index >= this.totalPoems) {\n                console.error('无效的诗词索引:', index);\n                this.showErrorMessage('无效的诗词索引');\n                return;\n            }\n\n            // 确保allPoems数组有足够的元素\n            if (this.allPoems.length <= index) {\n                console.error('诗词数据未加载完全，当前长度:', this.allPoems.length, '请求索引:', index);\n                this.showErrorMessage('诗词数据正在加载中，请稍后再试');\n                return;\n            }\n\n            // 获取当前诗词，必须存在\n            const poemData = this.allPoems[index];\n            if (!poemData) {\n                console.error('该索引处没有诗词数据:', index);\n                this.showErrorMessage('找不到该诗词数据');\n                return;\n            }\n\n            console.log('当前诗词数据:', poemData);\n            \n            // 设置当前状态\n            this.currentPoemIndex = index;\n            this.isOverlayVisible = true;\n            this.isRecitingMode = false;\n            this.recitationResult = null;\n            \n            // 如果还没有加载过这首诗的详细内容，则加载\n            if (!poemData.content || (Array.isArray(poemData.content) && poemData.content.length === 1 && poemData.content[0] === '点击加载详情')) {\n                try {\n                    await this.loadPoemDetails(index);\n                } catch (error) {\n                    console.error('加载诗词详情失败:', error);\n                    this.showErrorMessage('加载诗词详情失败，请稍后再试');\n                    // 避免加载失败时闪退\n                    this.hideOverlay();\n                }\n            }\n        },\n        \n        // 加载诗词详情\n        async loadPoemDetails(index) {\n            try {\n                // 发送空背诵请求以获取诗词详情\n                const response = await axios.post('/api/recitation/submit_text', {\n                    session_id: this.sessionId,\n                    recitation_text: '',\n                    poem_index: index\n                });\n                \n                console.log('加载诗词详情响应:', response.data);\n                \n                // 更新当前诗词信息\n                if (response.data.current_poem) {\n                    this.allPoems[index] = {\n                        poem_id: response.data.current_poem.poem_id,\n                        title: response.data.current_poem.title,\n                        author: response.data.current_poem.author,\n                        poem_name: response.data.current_poem.poem_name,\n                        content: response.data.current_poem.content,\n                        is_completed: false,\n                        score: 0\n                    };\n                }\n                \n                // 更新所有诗词的状态\n                if (response.data.all_poems) {\n                    response.data.all_poems.forEach((poem, i) => {\n                        if (this.allPoems[i]) {\n                            this.allPoems[i].is_completed = poem.is_completed;\n                            this.allPoems[i].score = poem.score;\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error('加载诗词详情失败:', error);\n                this.showErrorMessage('加载诗词详情失败，请稍后再试');\n            }\n        },\n        \n        // 关闭诗词详情\n        hideOverlay() {\n            this.isOverlayVisible = false;\n            this.isRecitingMode = false;\n            this.recitationResult = null;\n        },\n        \n        // 获取诗词评分\n        getPoemScore(index) {\n            if (!this.allPoems || index < 0 || index >= this.allPoems.length) {\n                return 0;\n            }\n            return this.allPoems[index] && this.allPoems[index].score ? this.allPoems[index].score : 0;\n        },\n        \n        // 切换页面\n        handlePageChange(newPage) {\n            this.currentPage = newPage;\n        },\n        \n        // 开始背诵模式\n        beginRecite() {\n            this.isRecitingMode = true;\n            this.recitationResult = null;\n            this.showTextInput = false;\n            this.textRecitation = '';\n        },\n        \n        // 关闭背诵结果\n        closeRecitation() {\n            this.isRecitingMode = false;\n            this.recitationResult = null;\n        },\n        \n        // 开始语音背诵\n        startVoiceRecitation() {\n            this.isRecording = true;\n            this.recordingTimeLeft = 15; // 15秒录音\n            \n            // 请求后端开始录音\n            axios.post('/api/recitation/record', {\n                session_id: this.sessionId,\n                poem_index: this.currentPoemIndex,\n                duration: 15\n            })\n            .then(response => {\n                console.log('语音背诵响应:', response.data);\n                this.handleRecitationResult(response.data);\n            })\n            .catch(error => {\n                console.error('语音背诵失败:', error);\n                this.showErrorMessage('语音背诵失败，请稍后再试');\n                this.isRecording = false;\n            });\n            \n            // 倒计时显示\n            this.recordingTimer = setInterval(() => {\n                this.recordingTimeLeft--;\n                if (this.recordingTimeLeft <= 0) {\n                    clearInterval(this.recordingTimer);\n                    this.isRecording = false;\n                }\n            }, 1000);\n        },\n        \n        // 提交文本背诵\n        async submitTextRecitation() {\n            if (!this.textRecitation.trim()) {\n                this.showErrorMessage('请输入背诵内容');\n                return;\n            }\n            \n            try {\n                const response = await axios.post('/api/recitation/submit_text', {\n                    session_id: this.sessionId,\n                    recitation_text: this.textRecitation,\n                    poem_index: this.currentPoemIndex\n                });\n                \n                console.log('文本背诵响应:', response.data);\n                this.handleRecitationResult(response.data);\n            } catch (error) {\n                console.error('文本背诵提交失败:', error);\n                this.showErrorMessage('文本背诵提交失败，请稍后再试');\n            }\n        },\n        \n        // 处理背诵结果\n        handleRecitationResult(result) {\n            this.isRecording = false;\n            if (this.recordingTimer) {\n                clearInterval(this.recordingTimer);\n            }\n            \n            if (result.error) {\n                this.showErrorMessage(result.error);\n                return;\n            }\n\n            // 构建完整的正确文本（标题 + 作者 + 内容）\n            const fullCorrectText = `${this.currentPoem.title}${this.currentPoem.author}${this.currentPoem.content.join('')}`;\n            \n            // 去除所有标点符号并计算差异\n            const cleanInput = result.recitation_text.replace(/[，。？！；：\"\"''【】()（）《》、，。、。\\s]/g, '');\n            const cleanCorrect = fullCorrectText.replace(/[，。？！；：\"\"''【】()（）《》、，。、。\\s]/g, '');\n            \n            // 计算编辑距离\n            const diffCount = this.calculateDifference(cleanInput, cleanCorrect);\n            \n            // 根据差异字数评分\n            let score;\n            if (diffCount === 0) {\n                score = 5;  // 完全正确\n            } else if (diffCount <= 3) {\n                score = 4;  // 错1-3个字\n            } else if (diffCount <= 5) {\n                score = 3;  // 错3-5个字\n            } else if (diffCount <= 8) {\n                score = 2;  // 错5-8个字\n            } else if (diffCount <= 10) {\n                score = 1;  // 错8-10个字\n            } else {\n                score = 0;  // 错误超过10个字\n            }\n            \n            // 更新结果对象，保存完整的正确文本以供显示\n            this.recitationResult = {\n                ...result,\n                score: score,\n                accuracy: Math.max(0, Math.round((1 - diffCount / cleanCorrect.length) * 100)),\n                feedback: this.getFeedback(score),\n                recitation_text: result.recitation_text,\n                correct_text: fullCorrectText  // 使用完整的正确文本\n            };\n            \n            this.showMask = false;  // 提交答案后取消遮罩\n            this.clearCountdown();  // 清除倒计时\n            \n            // 更新当前诗词的完成状态和评分\n            if (this.currentPoemIndex !== null && this.allPoems[this.currentPoemIndex]) {\n                this.allPoems[this.currentPoemIndex].is_completed = true;\n                this.allPoems[this.currentPoemIndex].score = score;\n            }\n        },\n        \n        // 计算两个字符串的差异字数\n        calculateDifference(str1, str2) {\n            const len1 = str1.length;\n            const len2 = str2.length;\n            const dp = Array(len1 + 1).fill(null).map(() => Array(len2 + 1).fill(0));\n\n            // 初始化第一行和第一列\n            for (let i = 0; i <= len1; i++) dp[i][0] = i;\n            for (let j = 0; j <= len2; j++) dp[0][j] = j;\n\n            // 填充dp数组\n            for (let i = 1; i <= len1; i++) {\n                for (let j = 1; j <= len2; j++) {\n                    if (str1[i - 1] === str2[j - 1]) {\n                        dp[i][j] = dp[i - 1][j - 1];\n                    } else {\n                        dp[i][j] = Math.min(\n                            dp[i - 1][j] + 1,    // 删除\n                            dp[i][j - 1] + 1,    // 插入\n                            dp[i - 1][j - 1] + 1 // 替换\n                        );\n                    }\n                }\n            }\n\n            return dp[len1][len2];\n        },\n        \n        // 根据分数获取反馈信息\n        getFeedback(score) {\n            switch (score) {\n                case 5:\n                    return \"太棒了！完全正确！\";\n                case 4:\n                    return \"非常好！只有少许错误\";\n                case 3:\n                    return \"不错！继续努力\";\n                case 2:\n                    return \"还需要多加练习\";\n                case 1:\n                    return \"要加油哦\";\n                default:\n                    return \"需要更多练习\";\n            }\n        },\n        \n        // 显示错误信息\n        showErrorMessage(message) {\n            this.errorMessage = message;\n            this.showError = true;\n            setTimeout(() => {\n                this.showError = false;\n            }, 3000);\n        },\n\n        // 开始倒计时\n        startCountdown() {\n            this.countdown.time = 60;\n            this.countdown.isActive = true;\n            this.showTimeoutMessage = false;\n            \n            // 清除可能存在的旧定时器\n            if (this.countdown.timer) {\n                clearInterval(this.countdown.timer);\n            }\n            \n            this.countdown.timer = setInterval(() => {\n                if (this.countdown.time > 0) {\n                    this.countdown.time--;\n                } else {\n                    this.timeUp();\n                }\n            }, 1000);\n        },\n        \n        // 时间到处理\n        timeUp() {\n            clearInterval(this.countdown.timer);\n            this.countdown.isActive = false;\n            this.showTimeoutMessage = true;\n            this.showMask = false;  // 时间到时显示内容\n        },\n        \n        // 清理倒计时\n        clearCountdown() {\n            if (this.countdown.timer) {\n                clearInterval(this.countdown.timer);\n                this.countdown.timer = null;\n            }\n            this.countdown.isActive = false;\n            this.showTimeoutMessage = false;\n        },\n        \n        // 修改 toggleMask 方法\n        toggleMask() {\n            this.showMask = !this.showMask;\n            if (this.showMask) {\n                this.startCountdown();  // 遮罩开启时开始倒计时\n            } else {\n                this.clearCountdown();  // 遮罩关闭时清除倒计时\n            }\n        },\n    },\n    beforeUnmount() {\n        this.clearCountdown();\n    }\n}\n</script>\n\n<style scoped>\n.body {\n    font-family: \"宋体\", sans-serif;\n    background-color: #f8f4e9;\n    /* 页面背景颜色 */\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    /* 透视 */\n    background-image: url('../assets/image/he.gif');\n    background-size: cover;\n    background-position: center;\n    color: #333;\n    background-repeat: repeat;\n    min-height: 100vh;\n    width: 100%;\n}\n\n.poem-card-container {\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    justify-content: center;\n    text-align: center;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 15px;\n    width: 80%;\n    margin-top: 5vh;\n}\n\n.poem-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    /* 水平居中卡片内容 */\n    justify-content: center;\n    /* 垂直居中卡片内容 */\n    text-align: center;\n    width: 100%;\n    /* 卡片占满容器宽度 */\n    height: auto;\n    box-sizing: border-box;\n    margin-bottom: 20%;\n    margin-top: 10%;\n}\n\n.shadow-image {\n    border-radius: 20px;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.5);\n    transition: box-shadow 0.3s ease, transform 0.3s ease;\n    cursor: pointer;\n}\n\n.shadow-image:hover {\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    transform: translateY(4px);\n}\n\n.stars {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n}\n\n.stars i {\n    font-size: 2em;\n}\n\n.fas.fa-star {\n    color: gold;\n    /* 黄色 */\n}\n\n.far.fa-star {\n    color: grey;\n    /* 灰色 */\n}\n\n.overlay {\n    position: fixed;\n    /* 设置为 fixed 定位，使蒙版固定在页面上 */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    /* 半透明黑色背景，遮挡周围区域 */\n    display: flex;\n    /* 使用 flexbox 来居中内容 */\n    justify-content: center;\n    /* 水平居中 */\n    align-items: center;\n    /* 垂直居中 */\n    z-index: 1000;\n    /* 确保蒙版显示在最上层 */\n    flex-direction: column;\n    background-size: cover;\n    /* 确保背景图片填满容器 */\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.overlay-poem {\n    width: 500px;\n    /* 设置固定的宽度 */\n    min-height: 550px;\n    /* 设置最小高度 */\n    padding: 20px;\n    box-sizing: border-box;\n    background-image: url('../assets/image/background.jpg');\n    /* 可选的背景图像 */\n    border-radius: 10px;\n    /* 可选，设置圆角 */\n    opacity: 1;\n    /* 保证内容区域不透明 */\n    display: flex;\n    flex-direction: column;\n}\n\n.title {\n    font-size: 2em;\n    font-family: \"Arial\", sans-serif;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 10px;\n    color: #333;\n}\n\n/* Author Style */\n.author {\n    font-size: 1.5em;\n    font-family: \"Georgia\", serif;\n    font-style: italic;\n    text-align: center;\n    margin-bottom: 20px;\n    color: #555;\n}\n\n/* Content Style */\n.content {\n    font-size: 1.2em;\n    font-family: \"Times New Roman\", serif;\n    text-align: center;\n    margin-bottom: 10px;\n    white-space: pre-line;\n    /* Ensures the sentence is displayed in multiple lines */\n    line-height: 1.5;\n    color: #333;\n}\n\n.content-of-poem-overlay {\n    min-height: 250px;\n    max-height: 300px;\n    overflow-y: auto;\n    position: relative;\n    margin-bottom: 20px;\n}\n\n.btn-grad {\n    background-image: linear-gradient(to right, #649173 0%, #DBD5A4 51%, #649173 100%);\n    margin: 5px;\n    padding: 10px 25px;\n    text-align: center;\n    text-transform: uppercase;\n    transition: 0.5s;\n    background-size: 200% auto;\n    color: white;\n    box-shadow: 0 0 20px #eee;\n    border-radius: 10px;\n    display: inline-block;\n    border: none;\n    cursor: pointer;\n}\n\n.btn-grad:hover {\n    background-position: right center;\n    /* change the direction of the change here */\n    color: #fff;\n    text-decoration: none;\n}\n\n.recite-button-container {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-top: 20px;\n}\n\n.close-button {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: none;\n    border: none;\n    font-size: 24px;\n    cursor: pointer;\n    z-index: 10;\n    color: #333;\n    padding: 5px 10px;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n}\n\n.close-button:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n    background-color: #f8d7da;\n    color: #721c24;\n    padding: 10px 15px;\n    border-radius: 5px;\n    margin: 10px 0;\n    position: fixed;\n    top: 80px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 1100;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n/* 背诵相关样式 */\n.recitation-area {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.recitation-prompt {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.recitation-buttons {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    margin: 15px 0;\n}\n\n.recording-status {\n    text-align: center;\n    margin: 20px 0;\n    font-size: 1.2em;\n    color: #721c24;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.pulse-icon {\n    width: 20px;\n    height: 20px;\n    background-color: #dc3545;\n    border-radius: 50%;\n    margin-bottom: 10px;\n    animation: pulse 1s infinite;\n}\n\n@keyframes pulse {\n    0% {\n        transform: scale(0.95);\n        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);\n    }\n    \n    70% {\n        transform: scale(1);\n        box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);\n    }\n    \n    100% {\n        transform: scale(0.95);\n        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);\n    }\n}\n\n.text-input-area {\n    margin-top: 15px;\n    width: 100%;\n}\n\n.recitation-textarea {\n    width: 100%;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    font-size: 1em;\n    resize: vertical;\n    margin-bottom: 10px;\n}\n\n.submit-text {\n    margin-top: 10px;\n}\n\n.recitation-result {\n    padding: 15px;\n    width: 100%;\n    text-align: center;\n}\n\n.result-status {\n    border-radius: 8px;\n    padding: 15px;\n    margin-bottom: 20px;\n    color: white;\n}\n\n.success {\n    background-color: rgba(40, 167, 69, 0.8);\n}\n\n.warning {\n    background-color: rgba(255, 152, 0, 0.8);\n}\n\n.result-icon {\n    font-size: 2em;\n    margin-bottom: 10px;\n}\n\n.accuracy, .score-display, .recognized-text, .correct-text {\n    margin: 8px 0;\n}\n\n.recognized-text, .correct-text {\n    font-size: 0.9em;\n    text-align: left;\n    background: rgba(255, 255, 255, 0.2);\n    padding: 5px;\n    border-radius: 5px;\n    word-break: break-all;\n}\n\n.page-poem {\n    margin: 20px 0 40px 0;\n}\n\n.content-masked {\n    background-color: #f8f4e9;\n    color: transparent;\n    user-select: none;\n    position: relative;\n    transition: all 0.3s ease;\n}\n\n.content-masked:hover {\n    background-color: #e8e4d9;\n}\n\n.poem-container {\n    position: relative;\n    width: 100%;\n    min-height: 250px;\n}\n\n.poem-content {\n    position: relative;\n    z-index: 1;\n}\n\n.poem-mask {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(248, 244, 233, 0.95) 0%, rgba(248, 244, 233, 0.98) 100%);\n    backdrop-filter: blur(2px);\n    border-radius: 8px;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);\n    z-index: 2;\n    transition: all 0.3s ease;\n    pointer-events: none;\n}\n\n.poem-mask::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 80%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, rgba(100, 145, 115, 0.3), transparent);\n}\n\n.poem-mask::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23649173' fill-opacity='0.03' fill-rule='evenodd'/%3E%3C/svg%3E\");\n    opacity: 0.5;\n}\n\n.countdown-display {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    background: linear-gradient(135deg, rgba(238, 226, 203, 0.95) 0%, rgba(245, 236, 220, 0.9) 100%);\n    padding: 8px 15px;\n    border-radius: 8px;\n    font-family: \"楷体\", \"STKaiti\", serif;\n    color: #614124;\n    font-size: 1.1em;\n    border: 1px solid rgba(139, 69, 19, 0.3);\n    box-shadow: 0 2px 8px rgba(139, 69, 19, 0.1);\n    z-index: 1000;\n}\n\n.timeout-message {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: linear-gradient(135deg, rgba(238, 226, 203, 0.98) 0%, rgba(245, 236, 220, 0.95) 100%);\n    padding: 20px 30px;\n    border-radius: 12px;\n    text-align: center;\n    border: 2px solid rgba(139, 69, 19, 0.3);\n    box-shadow: 0 4px 15px rgba(139, 69, 19, 0.15);\n    z-index: 1000;\n    animation: fadeIn 0.5s ease;\n}\n\n.timeout-message div {\n    margin: 10px 0;\n    color: #614124;\n    font-family: \"楷体\", \"STKaiti\", serif;\n    font-size: 1.2em;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EADrBC,GAAA;EAK8BD,KAAK,EAAC;;;EAGvBA,KAAK,EAAC;AAAqB;mBARxC;;EAcqBA,KAAK,EAAC;AAAO;;EAOrBA,KAAK,EAAC;AAAW;;EAObA,KAAK,EAAC;AAAc;;EAEhBA,KAAK,EAAC;AAAyB;;EA9BpDC,GAAA;EAkC4CD,KAAK,EAAC;;;EACrBA,KAAK,EAAC;AAAc;;EAChBA,KAAK,EAAC;AAAO;;EAGbA,KAAK,EAAC;AAAQ;;EAvC/CC,GAAA;EA8CmDD,KAAK,EAAC;;;EA9CzDC,GAAA;EA+C6BD,KAAK,EAAC;;;EA/CnCC,GAAA;EAkDuDD,KAAK,EAAC;;;EAlD7DC,GAAA;EAyD2CD,KAAK,EAAC;;;EAzDjDC,GAAA;EA0DiDD,KAAK,EAAC;;;EAEtBA,KAAK,EAAC;AAAa;;EAEnBA,KAAK,EAAC;AAAU;;EAChBA,KAAK,EAAC;AAAe;;EACrBA,KAAK,EAAC;AAAiB;;EACvBA,KAAK,EAAC;AAAc;;EAjErDC,GAAA;AAAA;;EAAAA,GAAA;EAsEgDD,KAAK,EAAC;;;EAtEtDC,GAAA;EA0EoCD,KAAK,EAAC;;;EAETA,KAAK,EAAC;AAAoB;;EA5E3DC,GAAA;EAkFsDD,KAAK,EAAC;;;EAlF5DC,GAAA;EA8F4BD,KAAK,EAAC;;;;;;;uBA7F9BE,mBAAA,CAmGM,OAnGNC,UAmGM,GAlGFC,YAAA,CAAcC,qBAAA,GAEdC,mBAAA,UAAa,EACFC,KAAA,CAAAC,SAAS,I,cAApBN,mBAAA,CAAoE,OAApEO,UAAoE,EAAAC,gBAAA,CAArBH,KAAA,CAAAI,YAAY,oBALnEL,mBAAA,gBAOQA,mBAAA,eAAkB,EAClBM,mBAAA,CAYM,OAZNC,UAYM,GAXFP,mBAAA,uBAA0B,G,kBAC1BJ,mBAAA,CASMY,SAAA,QAnBlBC,WAAA,CAUyCC,QAAA,CAAAC,cAAc,EAVvD,CAUyBC,IAAI,EAAEC,KAAK;yBAAxBjB,mBAAA,CASM;MATwCD,GAAG,EAAEkB,KAAK;MAAEnB,KAAK,EAAC;QAC5DY,mBAAA,CAC6E;MADvEQ,GAAG,EAAEC,OAAO,yBAAyBF,KAAK,QAAQZ,KAAA,CAAAe,WAAW;MAAkBC,KAA4B,EAA5B;QAAA;MAAA,CAA4B;MAACC,KAAK,EAAC,OAAO;MAC3HxB,KAAK,EAAC,cAAc;MAAEyB,OAAK,EAAAC,MAAA,IAAEV,QAAA,CAAAW,WAAW,CAACR,KAAK,IAAIZ,KAAA,CAAAe,WAAW;4BAZjFM,UAAA,GAagBtB,mBAAA,mBAAsB,EACtBM,mBAAA,CAIM,OAJNiB,UAIM,I,cAHF3B,mBAAA,CAEUY,SAAA,QAjB9BC,WAAA,CAeiD,CAAC,EAAde,SAAS;aAAzB1B,YAAA,CAEU2B,kBAAA;QAFuB9B,GAAG,EAAE6B;MAAS;QAfnEE,OAAA,EAAAC,QAAA,CAgBwB,MAAyH,CAAzH7B,YAAA,CAAyH8B,qBAAA;UAA5GX,KAAK,EAhB1CY,eAAA,CAgB4CnB,QAAA,CAAAoB,YAAY,CAACjB,KAAK,IAAIZ,KAAA,CAAAe,WAAW,cAAcQ,SAAS;YAAAO,KAAA;UAAA;YAAAA,KAAA;UAAA;;QAhBpGC,CAAA;;;oCAqBQ1B,mBAAA,CAGM,OAHN2B,UAGM,GAFFnC,YAAA,CACmFoC,wBAAA;IADpEC,UAAU,EAAV,EAAU;IAACC,MAAM,EAAC,mBAAmB;IAAEC,KAAK,EAAEpC,KAAA,CAAAqC,UAAU;IAAE5C,KAAK,EAAC,MAAM;IAAE,WAAS,EAAE,CAAC;IAC9F,cAAY,EAAEO,KAAA,CAAAe,WAAW;IAAGuB,eAAc,EAAE7B,QAAA,CAAA8B;2EAGrDxC,mBAAA,aAAgB,EACLC,KAAA,CAAAwC,gBAAgB,I,cAA3B7C,mBAAA,CAuEM;IAlGdD,GAAA;IA2BqCD,KAAK,EAAC,SAAS;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,MA3B3DC,cAAA,KAAAC,IAAA,KA2BkElC,QAAA,CAAAmC,WAAA,IAAAnC,QAAA,CAAAmC,WAAA,IAAAD,IAAA,CAAW;MACjEtC,mBAAA,CAqEM,OArENwC,UAqEM,GApEF9C,mBAAA,UAAa,EACbM,mBAAA,CAwBM,OAxBNyC,UAwBM,GAvBFzC,mBAAA,CAAkE;IAA1DZ,KAAK,EAAC,cAAc;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAElC,QAAA,CAAAmC,WAAA,IAAAnC,QAAA,CAAAmC,WAAA,IAAAD,IAAA,CAAW;KAAE,GAAO,GAEzD5C,mBAAA,kBAAqB,EACVU,QAAA,CAAAsC,WAAW,I,cAAtBpD,mBAAA,CAmBM,OAnBNqD,UAmBM,GAlBF3C,mBAAA,CAUM,OAVN4C,WAUM,GATF5C,mBAAA,CAEM,OAFN6C,WAEM,EAAA/C,gBAAA,CADCM,QAAA,CAAAsC,WAAW,CAACI,KAAK,kBAExB9C,mBAAA,CAEM,OAFN+C,WAEM,EAAAjD,gBAAA,CADCM,QAAA,CAAAsC,WAAW,CAACM,MAAM,mB,kBAEzB1D,mBAAA,CAEMY,SAAA,QA5ClCC,WAAA,CA0C6DC,QAAA,CAAAsC,WAAW,CAACO,OAAO,EA1ChF,CA0CyCC,IAAI,EAAEC,SAAS;yBAA5B7D,mBAAA,CAEM;MAFiDD,GAAG,EAAE8D,SAAS;MAAE/D,KAAK,EAAC;QACzEY,mBAAA,CAAqB,aAAAF,gBAAA,CAAboD,IAAI,iB;oCAGTvD,KAAA,CAAAyD,cAAc,I,cAAzB9D,mBAAA,CAAmD,OAAnD+D,WAAmD,KA9C3E3D,mBAAA,gBA+C6DC,KAAA,CAAA2D,SAAS,CAACC,QAAQ,I,cAAvDjE,mBAAA,CAEM,OAFNkE,WAEM,EAFmD,QAChD,GAAA1D,gBAAA,CAAG2D,IAAI,CAACC,KAAK,CAAC/D,KAAA,CAAA2D,SAAS,CAACK,IAAI,UAAS,GAAC,GAAA7D,gBAAA,CAAGH,KAAA,CAAA2D,SAAS,CAACK,IAAI,SAAQ,IACxE,mBAjDxBjE,mBAAA,gBAkDmCC,KAAA,CAAAiE,kBAAkB,I,cAA7BtE,mBAAA,CAEM,OAFNuE,WAEM,EAAAzB,MAAA,QAAAA,MAAA,OADFpC,mBAAA,CAAe,aAAV,MAAI,oB,MAnDrCN,mBAAA,e,KAAAA,mBAAA,e,GAwDgBA,mBAAA,SAAY,EACDC,KAAA,CAAAyD,cAAc,I,cAAzB9D,mBAAA,CAoCM,OApCNwE,WAoCM,GAnCSnE,KAAA,CAAAoE,gBAAgB,I,cAA3BzE,mBAAA,CAUM,OAVN0E,WAUM,GATFhE,mBAAA,CAOM;IAPAZ,KAAK,EA3DnC6E,eAAA,mBA2DuDtE,KAAA,CAAAoE,gBAAgB,CAACG,KAAK;MACjDlE,mBAAA,CAA4E,OAA5EmE,WAA4E,EAAArE,gBAAA,CAAhDH,KAAA,CAAAoE,gBAAgB,CAACG,KAAK,mCAClDlE,mBAAA,CAAwC,YAAAF,gBAAA,CAAjCH,KAAA,CAAAoE,gBAAgB,CAACK,QAAQ,kBAChCpE,mBAAA,CAAiE,OAAjEqE,WAAiE,EAA3C,OAAK,GAAAvE,gBAAA,CAAGH,KAAA,CAAAoE,gBAAgB,CAACO,QAAQ,IAAG,GAAC,iBAC3DtE,mBAAA,CAAmE,OAAnEuE,WAAmE,EAAxC,MAAI,GAAAzE,gBAAA,CAAGH,KAAA,CAAAoE,gBAAgB,CAACG,KAAK,IAAG,IAAE,iBAC7DlE,mBAAA,CAA+E,OAA/EwE,WAA+E,EAAlD,QAAM,GAAA1E,gBAAA,CAAGH,KAAA,CAAAoE,gBAAgB,CAACU,eAAe,kBACtEzE,mBAAA,CAAyE,OAAzE0E,WAAyE,EAA/C,QAAM,GAAA5E,gBAAA,CAAGH,KAAA,CAAAoE,gBAAgB,CAACY,YAAY,iB,kBAEpE3E,mBAAA,CAA6D;IAArDZ,KAAK,EAAC,UAAU;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAElC,QAAA,CAAAwE,eAAA,IAAAxE,QAAA,CAAAwE,eAAA,IAAAtC,IAAA,CAAe;KAAE,IAAE,E,oBAExDhD,mBAAA,CAuBM,OA5F1BuF,WAAA,GAsEmClF,KAAA,CAAAmF,WAAW,I,cAAtBxF,mBAAA,CAGM,OAHNyF,WAGM,G,0BAFF/E,mBAAA,CAA8B;IAAzBZ,KAAK,EAAC;EAAY,6BACvBY,mBAAA,CAA4C,WAAzC,UAAQ,GAAAF,gBAAA,CAAGH,KAAA,CAAAqF,iBAAiB,IAAG,QAAM,gB,oBAE5C1F,mBAAA,CAiBM,OAjBN2F,WAiBM,G,4BAhBFjF,mBAAA,CAAsB,WAAnB,iBAAe,sBAClBA,mBAAA,CAKM,OALNkF,WAKM,GAJFlF,mBAAA,CAAsE;IAA9DZ,KAAK,EAAC,UAAU;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAElC,QAAA,CAAA+E,oBAAA,IAAA/E,QAAA,CAAA+E,oBAAA,IAAA7C,IAAA,CAAoB;KAAE,QAAM,GAC7DtC,mBAAA,CAES;IAFDZ,KAAK,EAAC,UAAU;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,MAAAtB,MAAA,IAAEnB,KAAA,CAAAyF,aAAa,IAAIzF,KAAA,CAAAyF,aAAa;sBACxDzF,KAAA,CAAAyF,aAAa,qC,GAGbzF,KAAA,CAAAyF,aAAa,I,cAAxB9F,mBAAA,CAQM,OARN+F,WAQM,G,gBAPFrF,mBAAA,CAKY;IAxF5C,uBAAAoC,MAAA,QAAAA,MAAA,MAAAtB,MAAA,IAoF6CnB,KAAA,CAAA2F,cAAc,GAAAxE,MAAA;IACvByE,WAAW,EAAC,YAAY;IACxBC,IAAI,EAAC,GAAG;IACRpG,KAAK,EAAC;iDAHGO,KAAA,CAAA2F,cAAc,E,GAK3BtF,mBAAA,CAA8E;IAAtEZ,KAAK,EAAC,sBAAsB;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAElC,QAAA,CAAAqF,oBAAA,IAAArF,QAAA,CAAAqF,oBAAA,IAAAnD,IAAA,CAAoB;KAAE,IAAE,E,KAzFrG5C,mBAAA,e,0BA8FgBJ,mBAAA,CAEM,OAFNoG,WAEM,GADF1F,mBAAA,CAA2D;IAAnDZ,KAAK,EAAC,UAAU;IAAEyB,OAAK,EAAAuB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAElC,QAAA,CAAAuF,WAAA,IAAAvF,QAAA,CAAAuF,WAAA,IAAArD,IAAA,CAAW;KAAE,MAAI,E,UA/FtE5C,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}